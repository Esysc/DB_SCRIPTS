#!/bin/bash


#
#
# setPasswords v 1.2
# Set the customized passwords on system
# Author ACS 2014

PROGNAME=${0##*/}
VERSION="0.1"

## Parse prog name to find an ID if executed from SPOTDB

ID=$(echo $PROGNAME | awk -F "_" '{print $3}')

## Global Variables

typeset APISERVER="x.x.x.204" # IP address of the api server


log() {
  local level=${1?}
  shift
  local code= line="[$(date '+%F %T')] $level: $*"
  if [ -t 2 ]
  then
    case "$level" in
      INFO) code=36 ;;
      DEBUG) code=30 ;;
      WARN) code=33 ;;
      ERROR) code=31 ;;
      *) code=37 ;;
    esac
    echo -e "\e[${code}m${line}\e[0m"
  else
    echo "$line"
  fi >&2
  URI="http://$APISERVER/SPOT/provisioning/api/events"
  REST='{"title":"setPasswords ","content":"'$line'","userid":"'`whoami`'","date":"'`date`'"}'
  (
perl - "$REST"   "$URI" <<'_HERE_'
				 use integer;
				 use POSIX qw(strftime);
				 use Backticks;
				 use Data::Dumper;
				 use Sys::Hostname;
				 use Socket;
				 use LWP::UserAgent;
				 use LWP::Simple;
				 use strict;
				 use warnings;
				 use integer;
				 use Switch;
				 use JSON ;
				 use feature qw(switch);
				 use HTTP::Cookies;
				 use HTTP::Request;
				 use LWP;
				 use File::Path qw{mkpath};
				 my $REST = shift;
				 my $uri = shift;
				 my $lwp = LWP::UserAgent->new(
						 timeout               => 10,
						 );
				 my $req = HTTP::Request->new( 'POST', "$uri" );
				 $req->content($REST);
				 my $resp = $lwp->request($req);
				 print $req->as_string;
_HERE_
  )  2>&1 >/dev/null
  
}

sendToTable() {
  htmlTable=`echo $htmlTable | tr -d '\n\r'`
  TIME=`date +'%F %T'`
  URI="http://$APISERVER/SPOT/provisioning/api/tblpassword/$salesorder"
  REST='{"salesorder":"'$salesorder'","results":"'$htmlTable'","time":"'$TIME'"}'
  (
perl - "$REST"  "$URI" <<'_HERE_'
                                 use integer;
                                 use POSIX qw(strftime);
                                 use Backticks;
                                 use Data::Dumper;
                                 use Sys::Hostname;
                                 use Socket;
                                 use LWP::UserAgent;
                                 use LWP::Simple;
                                 use strict;
                                 use warnings;
                                 use integer;
                                 use Switch;
                                 use JSON ;
                                 use feature qw(switch);
                                 use HTTP::Cookies;
                                 use HTTP::Request;
                                 use LWP;
                                 use File::Path qw{mkpath};
                                 my $REST = shift;
				 my $uri = shift;
                                 my $lwp = LWP::UserAgent->new(
                                                 timeout               => 10,
                                                 );
                                 my $req = HTTP::Request->new( 'PUT', "$uri" );
                                 $req->content($REST);
                                 my $resp = $lwp->request($req);
                                 print $req->as_string;
				 print Dumper $resp;
_HERE_
  )
  
  
  
}

# Usage function
usage () {
  log INFO "usage $0
		-root [new root password ]
		-operator  [new operator password]
		-oracle [new oracle password ]
		-oldroot [the root password to use to change the others
		-oldoperator [the old operator pass ]
		-so [salesorder]
                -crmid [crmid of this system]
		--** the list of server ip address and os type   to connect to to change the passwords in the form:
		-server1 server1ip -os1 WINDOWS -server2 server2ip -os2 AIX -server3 server3ip -os3 LINUX  **--
  "
  exit 1
}

check_args() {
  [ $args -lt 16 ]  && log ERROR "There are not enough arguments, the minimum is 16." && usage && exit 1
  
}

TIMEOUT() {
  
  TIME=$1
  
  # start the command in a subshell to avoid problem with pipes
  # (spawn accepts one command)
  command="/bin/sh -c \"$2\""
  
  expect -c "set echo \"-noecho\"; set timeout $time; spawn -noecho $command; expect timeout { exit 1 } eof { exit 0 }"
  
  
}
sshExchange() {
  ssh_password.sh exchange $oldroot $host
}
sshExe() {
  # $1 client ip
  #
  # $2 command or function
  # No password required because we run on drbl server
  sshpass -p $oldroot ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null  root@$1 " $2"
  if [ $? -ne 0 ]; then
    log ERROR "Execution Error! May be ssh connection problem or execution of command'$2' issue. I will exit now."
    log ERROR "The command was: ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 \" $2\""
  fi
}

aixPassword () {
  aix_cmd=" uname -L | cut -d' ' -f2"
  host_name=$(sshExe $host hostname)
  if [ $? -eq 0 ]; then
    Sn=$(sshExe $host "$aix_cmd")
    comments=$Sn
    line=$(cat /tmp/pass.$random)
    OS="Unix"
    for t in $line; do
      user=$(echo $t | awk -F ":" '{print $1}')
      password=$(echo $t | awk -F ":" '{print $2}')
      if [[ "$user"  =~ "root" ]]; then
        password_root=$password
        client_pass="$oldroot"
      else
        client_pass=$root
      fi
      tblpass=$password
      log INFO "About to change password on a AIX server, HOST: $host_name"
      ret=""
      ret=$(sshpass -p $client_pass  $ssh  root@$host "id -u $user 2>&1 >/dev/null &&  echo 'EXISTS' || echo 'ERROR'")
      log WARN "The return value if $user exist is: $ret"
      if [[ "$ret" == "EXISTS"  || "$ret" == "" ]]; then
        sshpass -p $client_pass  $ssh  root@$host "echo $t | chpasswd  -c 2>&1 /dev/null"
        if [ $? -eq 0 ]; then
          tableMiddle
        fi
      fi
    done
    
  fi
}

linPassword () {
  linux_cmd=" dmidecode -s system-serial-number | grep -v \"\#\""
  host_name=$(sshExe $host hostname)
  Sn=$(sshExe $host "$linux_cmd 2>/dev/null")
  comments=$Sn
  line=$(cat /tmp/pass.$random)
  OS="Unix"
  for t in $line; do
    user=$(echo $t | awk -F ":" '{print $1}')
    password=$(echo $t | awk -F ":" '{print $2}')
    if [[ "$user"  =~ "root" ]]; then
      password_root=$password
      client_pass="$oldroot"
    else
      client_pass=$root
    fi
    tblpass=$password
    #Password need to apply dinamically because we use ssh
    log INFO "About to change password on a Linux server, HOST: $host_name"
    ret=""
    ret=$(sshpass -p $client_pass  $ssh  root@$host "id -u $user 2>&1 >/dev/null &&  echo 'EXISTS' || echo 'ERROR'")
    log WARN "The return value if $user exist is: $ret"
    if [[ "$ret" == "EXISTS"  || "$ret" == "" ]]; then
      
      sshpass -p $client_pass  $ssh  root@$host "echo $t | chpasswd  2>&1 /dev/null"
      if [ $? -eq 0 ]; then
        tableMiddle
      fi
    fi
    
  done
  
  
}


winPassword () {
  host_name=$(nmblookup -A $host | grep '<00> -     '  | awk '{print $1}' | head -1)
  host_name=${host_name,,}
  log INFO "Customizing host $host_name , os $os"
  Sn=$(winexe  -U administrator%$oldroot //$host   "cmd /C wmic.exe bios get serialnumber <NUL:" | head -2 | tail -1)
  comments=$Sn
  line=$(cat /tmp/pass.win.$random)
  OS="Windows"
  for t in $line; do
    user=$(echo $t | awk -F ":" '{print $1}')
    old_pass=$(echo $t | awk -F ":" '{print $2}')
    new_pass=$(echo $t | awk -F ":" '{print $3}')
    tblpass=$new_pass
    log INFO "About tu run winexe -U $user%$old_pass //$host 'net user $user $new_pass'"
    winexe -U $user%$old_pass //$host "net user $user $new_pass" > /dev/null
    if [ $? -eq 0 ]; then
      
      tableMiddle
    fi
  done
  
}

tableHeader () {
  htmlTable="$htmlTable<table id=\\\"listing_smaller\\\"><thead><tr>
  <th bgcolor=#5dc3f2>System ID</th>
  <th bgcolor=#5dc3f2>Customer</th>
  <th bgcolor=#5dc3f2>Region</th>
  <th bgcolor=#5dc3f2>Site</th>
  <th bgcolor=#5dc3f2>Technology</th>
  <th bgcolor=#5dc3f2>Resource Type</th>
  <th bgcolor=#5dc3f2>Keyword</th>
  <th bgcolor=#5dc3f2>Resource Name  (locked)</th>
  <th bgcolor=#5dc3f2>Username</th>
  <th bgcolor=#5dc3f2>Password</th>
  <th bgcolor=#5dc3f2>Phone</th>
  <th bgcolor=#5dc3f2>Ip Address</th>
  <th bgcolor=#5dc3f2>Comments</th>
  <th bgcolor=#5dc3f2>Connection Type</th>
  </tr></thead><tbody>"
  
}
tableMiddle () {
  canSend=1
  htmlTable="$htmlTable<tr>
  <td>$system_id</td>
  <td>$customer</td>
  <td>$region</td>
  <td>$site</td>
  <td>$technology</td>
  <td>$OS</td>
  <td>$host_name</td>
  <td bgcolor=#FDE9D9>=(CONCATENATE(A$index_table,\\\" \\\", G$index_table))</td>
  <td>$user</td>
  <td>$tblpass</td>
  <td>$phone</td>
  <td>$host</td>
  <td>$comments</td>
  <td>$connection_type</td>
  </tr>"
  
  index_table=`expr $index_table + 1`
}
tableFooter () {
  htmlTable="$htmlTable</tbody></table>"
}

args=$#
check_args



for((i=1; i <=14 ; i++))
do
  case "$1" in
    -root )
      root="$2" # You may want to check validity of $2
      shift 2
    ;;
    -operator )
      operator="$2"   # You may want to check validity of $2
      shift 2
    ;;
    -oracle )
      oracle="$2"   # You may want to check validity of $2
      shift 2
    ;;
    -oldroot )
      oldroot="$2"
      shift 2
    ;;
    -oldoperator )
      oldoperator="$2"
      shift 2
    ;;
    -so)
      so="$2"
      shift 2
    ;;
    -crmid )
      system_id=$2
      shift 2
    ;;
    *)      break
    ;;
  esac
done

servers=$#
counter=0
i=0
until [ $i -eq $servers ]
do
  
  ((counter++))
  i=$((i+4))
  targetip="server$counter"
  arg="$2"
  eval  	${targetip}="${arg}"
  shift 2
  targetos="os$counter"
  arg="$2"
  eval  ${targetos}="${arg}"
  shift 2
done

# Set variables
salesorder=$(echo $so | awk -F "|" '{print $1}')
customerACR=$(echo $so | awk -F "|" '{print $2}')
technology=" "
customer=$customerACR
region="  "
phone="  "
connection_type="  "
site="  "
pattern=" "
comments=" "
random=$(date '+%s')
ssh="ssh -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet "
#Set the tmp files to work on
touch /tmp/mess.$random
cat > /tmp/pass.$random << EOF
root:$root
operator:$operator
oracle:$oracle
EOF
cat > /tmp/pass.win.$random << EOF
administrator:$oldroot:$root
operator:$oldoperator:$operator
EOF
cat > /tmp/pass.v7000.$random << EOF
superuser:$root
EOF
canSend=0
tableHeader
index_table=2

for  ((i=1; i <= $counter ; i++))
do
  targetip="server$i"
  targetos="os$i"
  host=${!targetip}
  os=${!targetos}
  if [[ "$os" == "WINDOWS" ]]; then
    winPassword
  fi
  if [[ "$os" == "AIX" ]]; then
    aixPassword
  fi
  if [[ "$os" == "LINUX" ]]; then
    linPassword
  fi
done



#End table and cleanup tmp files
tableFooter

rm /tmp/pass.$random
rm /tmp/mess.$random
rm /tmp/pass.win.$random
rm /tmp/pass.v7000.$random
if [ $canSend -eq 1 ] ; then
  sendToTable
fi
log INFO "The HTML table result is: $htmlTable"




