#!/bin/bash  


#
#
# windowsBuild v 1.0
#
# - Added ipxe configuration to boostrap from dhcpd directly
# -Added time synchro part
# ipxe boot script added the dispatcher part
# This script is intended to be a wrapper for MDT and tftp server.
# It manage the CustomSettings ini file  and finally it write the boot file in tftp directory
# It accepts arguments from DB and is run totally from a daemon that check periodically for machine job
# The script can be run manually, it accepts a minimum of two arguments: 
# - Task ID (as defined in mdt database)
# - Rack position or directly the ip address of client (need to be know)
# Changes:
# 03.03.2016 First release
# Author ACS 2015


#Define the web services where to send events
#the form is WEB1, WEB2, WEB(n)
#Add the perl section for each service in 'log' function


PROGNAME=${0##*/}
VERSION="1.0"
WEBSERVER="http://x.x.x.203"
DRBL="x.x.x.203"

BASE="/home/partimag"
MDT="$BASE/MDT/Control"
WWWBOOT="/var/www/BOOT"

clientIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
#Get and transform mac address uppercase

MAC=$(ifconfig -a |
awk '/^[a-z]/ { iface=$1; mac=$NF ; next }
 /inet addr:/ { print mac }' | head -1)
lowerMAC=${MAC,,}

hwaddr=$(echo $MAC | tr 'a-z' 'A-Z')



clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}




# Usage function
usage () {
log INFO "usage $0 
-pos [rack_shelf | client ip]
-h [hostname]
-t [task ID]"
log INFO "Only 2 parameter are mandatory: -pos [rack_shelf | client IP] -t [task ID]."
log INFO "The parameter -pos can specify either the rack shelf position and directly the ip client (usefull to install virtual machines)"
check_args
}

# Checks if the mandatory arguments are all here
check_args() {
if valid_ip "$rackPosition" &&  [ "$ERROR" -eq 0 ]; then

Rack="Virtual"
Shelf=$clientIP

else
# Get the rack and shelf variable
Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
getEnv

fi




DIRS=$(ls -d "$MDT"/*/ | grep "CAPTURE")
#put here the mandatory params
([[ -z "$taskID"  || -z "$rackPosition" ]] ) && rackPosition="usage"  && log ERROR "Some mandatory parameters missing!!!!!" && log INFO "Type $0 without arguments to grab usage." && exit 1


 #check valid TaskID
[[ ! -d "$MDT/$taskID" ]]  && log ERROR "The taskID $taskID is not valid, please check the name. Possible values are for CAPTURE jobs are:" && log INFO "\n$(for dir in $DIRS;do  basename $dir;done)"  && exit 1
}



syncTime () {
step="Synching server time: "
log INFO "$step current date is $(date)"
log INFO "$step stopping the ntp service..."
service ntp stop
log INFO "$step contacting the x.x.x.204 server ..."
ntpdate x.x.x.204
log INFO "$step setting the hardware clock to UTC"
hwclock --systohc --utc


}



destroyDisks () {
log WARN "About to clean all partitions on local disk(s)................."
/usr/sbin/destroyDisks  > /dev/null 2>&1
log INFO "Finish cleaning local disk(s)"
}
# Function to find ip address or mac address of given rack shelf
# should be called with a rack shelf and kind of value you want to find as argument


#function append to cs.ini
append_csini() {
CRUD=$(which crudini)
csini="/home/partimag/MDT/Control/CustomSettings.ini"
#transform netmask in cidr


log INFO "Setting Rack equal to '$Rack' and Shelf to '$Shelf'"
#check if lockfile exists, if not create one
WAIT=$(( ( RANDOM % 10 )  + 1 ))
log INFO "Generating a random number of seconds ( $WAIT ) to wait to avoid conflicts..."
sleep $WAIT
lockfile="$MDT/lockini"
while [ -f $lockfile ]; do
	log INFO "Another client is locking customsettings.ini, wait for lock to free"
	sleep 1
done
# OK , lock file is gone away create my own
touch $lockfile
#Remove the section if already exists to create a new one
log INFO "Deleting the $hwaddr section if already existing"
$CRUD --del $csini $hwaddr

# Create the csini

setINI="$CRUD --set $csini $hwaddr"
$setINI TaskSequenceID "$taskID"
$setINI ComputerName "$hostname"
$setINI OSDComputerName "$hostname"
$setINI SLShareDynamicLogging '\\x.x.x.203\Images\MDT\Logs\Rack'$Rack'_Shelf'$Shelf
$setINI SLShare '\\x.x.x.203\Images\MDT\Logs\Rack'$Rack'_Shelf'$Shelf
#sanitaze the file from blank lines
log INFO "Removing blank lines from $csini"
sed -i '/^\s*$/d' $csini
# Remove the lock so others can edit it
rm $lockfile

}


#Function log for better printing

log() {
local level=${1?}
shift
local code=''
local line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

#LOG to web services
#Create one section for each web service
REST='{"title":"windowsBuild | '$rackPosition'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'

(
perl - "$REST"  <<'_HERE_'
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $uri = "http://x.x.x.204/SPOT/provisioning/api/events";
my $REST = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'POST', "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
_HERE_
)  >/dev/null  2>&1
salesOrder="$taskID"
if [[ ! -z $rackPosition && ! -z $salesOrder ]]; then createMonitorRecord "$line"; fi

}


SEND () {


perl -e '
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
my $REST = shift;
my $uri = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( "PUT", "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
' "$REST" "$URI"


}

createMonitorRecord () {
 Status="$1"
 subid="$rackPosition"
 subid=$(echo $rackPosition | grep -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
 if [[ "$subid" == "" ]]; then
 subid=$rackPosition
 else
# subid=$rackPosition"_"
 subid=$Rack"_"$Shelf
 fi
 PK="["$salesOrder"]["$subid"]"
 INSTALLATIONIP="<table class='collection table table-bordered'>
                        <tr><th>Dhcp ip</th><td>$clientIP</td></tr>
                        <tr><th>Cyclades:Port</th><td>$cycladesip : $cycladesport</td></tr>
                        <tr><th>Switch - Port</th><td>$switchip - $switchport</td></tr>
              </table>"

 URI="http://x.x.x.204/SPOT/provisioning/api/provisioningnotifications/$PK"

                         REST="{
        \"notifid\":\"$PK\",
        \"hostname\":\"$hostname\",
        \"installationip\":\"$INSTALLATIONIP\",
        \"status\":\"<b>$Status</b>\",
        \"progress\":\"$PROGRESS\",
        \"image\":\"$taskID\",
        \"firmware\":\"$MANUFACTURER\",
        \"ram\":\"$RAM_tot\",
        \"cpu\":\"$NUMPROC\",
        \"diskscount\":\"$DISKCOUNT\",
        \"netintcount\":\"$NETCOUNT\",
        \"model\":\"$MODEL\",
        \"serial\":\"$MACHSERIAL\",
        \"os\":\"Windows\"
        }"
        SEND >/dev/null  2>&1

}



# Gets the cyclades and swithes values from DB
getEnv() {

Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
rack=$(echo $Rack | sed 's/[^0-9]//g')
#Rack=$(echo  "${Rack##${Rack%%?}}")
shelf=$(echo  "${Shelf##${Shelf%%?}}")


log INFO "About to download env values from http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"

URI="http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"
results=$(
perl - "$URI"  <<'_HERE_'
use Time::Piece;
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};

my $WEB = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'GET', "$WEB" );
my $resp = $lwp->request($req);
my $decoded = decode_json($resp->content);
#my %recursive = ( $decoded->{rows} );
#print $req->as_string;
#print Dumper $resp;
#print Dumper $decoded->{rows}->[0]->{switchip};
my $switchip = $decoded->{rows}->[0]->{switchip};
my $bootpip = $decoded->{rows}->[0]->{bootpip};
my $cycladesip = $decoded->{rows}->[0]->{cycladesip};
my $cycladesport = $decoded->{rows}->[0]->{cycladesport};
my $switchport = $decoded->{rows}->[0]->{switchport};
my $rack = $decoded->{rows}->[0]->{rack};
my $shelf = $decoded->{rows}->[0]->{shelf};
print "$switchip\n$bootpip\n$cycladesip\n$cycladesport\n$switchport\n$rack\n$shelf\n";
_HERE_
)
#> /dev/null 2>&1
counter=1
for i in $results
do
case $counter in
1) switchip=$i;;
2) bootpip=$i;;
3) cycladesip=$i;;
4) cycladesport=$i;;
5) switchport=$i;;
6) rack=$i;;
7) shelf=$i;;
esac
counter=$((counter + 1))
done
}


#Create pxe boot files




bootPxe () {

MACSyslinux=01-${lowerMAC//:/-}
MACGrub=01-${lowerMAC}
bootSyslinux="/tftpboot/nbi_img/pxelinux.cfg/$MACSyslinux"
bootGrub="/tftpboot/nbi_img/pxelinux.cfg/$MACGrub"
bootIpxe="$WWWBOOT/$lowerMAC"

syslinuxCFG="default vesamenu.c32
timeout 70
prompt 0
noescape 1
MENU MARGIN 5
MENU BACKGROUND nagra.jpg
# Set the color for unselected menu item and timout message
MENU COLOR UNSEL 7;32;41 #c0000090 #00000000
MENU COLOR TIMEOUT_MSG 7;32;41 #c0000090 #00000000
MENU COLOR TIMEOUT 7;32;41 #c0000090 #00000000
MENU COLOR HELP 7;32;41 #c0000090 #00000000
say **********************************************
say Welcome to WINPE.
say Booting in WINPE
say **********************************************
# Allow client to edit boot parameters
ALLOWOPTIONS 1
# simple menu title
MENU TITLE NAGRAVISION (http://www.mycomp.comp)
label boot ipxe
MENU DEFAULT
MENU LABEL boot ipxe
kernel ipxe.lkrn
append  dhcp && chain http://x.x.x.203/boot.ipxe
"
grubCFG='
if [ "${grub_platform}" = "efi" ]; then
menuentry "WINPE '$taskID'" --class windows {
chainloader  /ipxe64.efi
}

else

menuentry "WINPE '$taskID'" --class windows {
#set root=http,10.0.129.101
linux16 memdisk iso raw
initrd16   ipxe.iso
}
fi
'

ipxeCFG='
<?php
echo "  item --key r '$taskID'   (r) '$taskID' \n";
echo "  item\n";
echo "  choose --default '$taskID' --timeout 10000 target && goto \${target} || goto cancelled\n";
echo "  :'$taskID'  \n";

echo "  :'$taskID'\n";

echo "  imgfree\n";
switch($_GET["platform"]) {
        case "efi":
                echo "  kernel \${remote-root}\${winpe-files}/wimboot\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/EFI/Microsoft/Boot/BCD BCD\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/boot.sdi boot.sdi\n";
                echo "  initrd -n boot.wim \${remote-root}\${winpe-files}/LiteTouchPE_x64.wim boot.wim\n";
                 echo "  boot || goto failed\n";
                break;
        default:
                echo "  kernel \${remote-root}\${winpe-files}/wimboot\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/BCD      BCD\n";
                echo "  initrd \${remote-root}\${winpe-files}/\${arch}/Boot/boot.sdi boot.sdi\n";
                echo "  initrd \${remote-root}\${winpe-files}/LiteTouchPE_x64.wim         boot.wim\n";
                 echo "  boot || goto failed\n";
                break;
}
echo " :failed\n";
$jsonDash = array("status" => "BOOT FAILED!!! May be some files has not been found. Check within a KVM", "progress" => "0");
updateDashboard($jsonDash);


?>
'



log INFO "Copying my bootfiles on Server....."
#Create the boot files
echo "$syslinuxCFG" | sshExe $DRBL "cat >  $bootSyslinux"
echo "$grubCFG" | sshExe $DRBL "cat >  $bootGrub"
echo "$ipxeCFG" | sshExe $DRBL "cat >  $bootIpxe"


}

# Scp  function
scpExe () {
# $1 client ip
#
# $2 source file
# $3 target file
# No password required because we run on drbl server

sshpass -p ***REMOVED*** scp -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t $2 root@$1:$3
if [[ $? -ne 0 ]]
then
log ERROR "Cannot scp $2 file to client, every further action will be not possible so I exit right now!"
exit 299
fi


}

sshExe() {
# $1 client ip
#
# $2 command or function
# No password required because we run on drbl server
sshpass -p ***REMOVED*** ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 " $2"
if [[ $? -ne 0 ]]
then
log ERROR "Execution Error! May be ssh connection problem or execution of command'$2' issue. I will exit now."
log ERROR "The command was: ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 \" $2\""
exit 299
fi
}



# check IP address function
valid_ip() {
ERROR=0
    oldIFS=$IFS
    IFS=.
    set -f
    set -- $1
    if [ $# -eq 4 ]
    then
      for seg
      do
        case $seg in
            ""|*[!0-9]*) ERROR=1;break ;; ## Segment empty or non-numeric char
            *) [ $seg -gt 255 ] && ERROR=2 ;;
        esac
      done
    else
      ERROR=3 ## Not 4 segments
    fi
    IFS=$oldIFS
    set +f
    return $ERROR
}

LINUX_system () {
        NUMPROC=$(grep -c "physical id" </proc/cpuinfo | sort | uniq)
        MACHSERIAL=$(dmidecode -s system-serial-number | grep -v '#')
        MANUFACTURER=$(dmidecode -s system-manufacturer | grep -v '#')
        NETCOUNT=$(/usr/share/drbl/bin/get-nic-devs | wc -l)
        MODEL=$(dmidecode -s system-product-name | grep -v '#')
        RAM_tot=$(grep MemTotal /proc/meminfo | cut -d':' -f2 | cut -d 'k' -f1)
        RAM_tot=$(echo "$RAM_tot" | xargs)
        RAM_tot=$(( RAM_tot / 1000 ))

        NUMPROC=$(echo "$NUMPROC" | xargs )
        MACHSERIAL=$(echo "$MACHSERIAL" | xargs)
        MANUFACTURER=$(echo "$MANUFACTURER" | xargs)
        MODEL=$(echo "$MODEL" | xargs)
        DISKCOUNT=$(lsblk -o NAME -i -d -n -e 1,11 | wc -l)
}




if [ $# -eq 0 ]; then
usage
fi

#Actually Get the arguments

while [[ -n $1 ]]; do
    case "$1" in
	  -pos )
	  rackPosition="$2" # You may want to check validity of $2
	  ;;
      -h )
	  hostname="$2"   # You may want to check validity of $2
	  ;;
      -t )
	  taskID="$2"  
	  ;;
	-* | --*)
      usage
      log ERROR "Unknown option $1 $2"
      error_exit "Unknown option $1 $2" ;;
    *)
      ;;
  esac
  shift 2
done


# check the arguments
# Please note that data is not verified
check_args
# Synch the time
syncTime


log INFO "Executing the machine inventory"
LINUX_system 

	#***********************************************	MDT WORKFLOW	****************************************************
	#Append the section to customsettings.ini
	log INFO "Starting MDT WORKFLOW"
	log INFO "Creating CustomSettings.ini section for MDT..."
	append_csini

	#Create the boot files
	log INFO "Creating bootfiles for grub and syslinux based on mac address"
	bootPxe

	# Create the record in dashboard table
	log INFO "Rebooting the client....."
	log INFO "End of Wrapper execution. Next messages comes from MDT"
	#Clean remote comman table
	perl /usr/local/bin/removeCommand.pl
                        /sbin/reboot >/dev/null  2>&1 &
exit 0
# End of file
exit 0
kill $My_Pid
