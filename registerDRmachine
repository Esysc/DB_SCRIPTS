#!/bin/bash  
# ---------------------------------------------------------------------------
# prepareDrmachine - Restore comopletely Generic iso image (RedHat)  to new physical/virtual machines using the existing PXE environment

# Copyright 2016, root <root@drbl01>
  
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# Usage: prepareDrmachine [-h|--help] [-iso] [-ip] [-n] [-g] [-s] [-h] [-pos] [-iloip] [-ilonm]

# Revision history:
# 2015-04-23 Created by template_generator ver. 3.3
# Added time server synchronisation part 2015-05-12
# 2015-06-1  - Added support to GEN 9 servers (removed hpacu* and installed hpssa* )
# 2015-06-1  - Added  GrubInstall function to refresh grub installation
# 2015-06-17 - Removed   hyphens from function nameing convention, replace within underscore
# 2015-06-18 - Added check permission function to set the setuid on user
# 2015-08-17 - Migration from prepareDrmachine to kickstart installation type to use new generic images 
# 2016-02-16 - changed repo line to point to http url instead of search for custom packages in localdisk (added for redhat 7)
# 2016-02-17 - Added netwroking script for post install tasks
# 2016-03-11 - Inlcude mirror and ilo configuration directly in script
# 2016-06.16 - Corrected missing function
# TODO : add part /boot/efi --fstype=efi --grow --maxsize=200 --size=20 if efi in kickstart standard file (when uefi will be supported if not already present in kickstart file)
# ---------------------------------------------------------------------------
PROGNAME=${0##*/}
VERSION="1.0"
WEBSERVER="http://x.x.x.203"
typeset ID=$(echo $PROGNAME | awk -F "_" '{print $3}')
typeset APISERVER="spmgt.my.comp.ltd"
syncTime () {
step="Synching server time: "
log INFO "$step current date is $(date)"
log INFO "$step stopping the ntp service..."
service ntp stop
log INFO "$step contacting the x.x.x.204 server ..."
ntpdate x.x.x.204
log INFO "$step setting the hardware clock to UTC"
hwclock --systohc --utc
}
setILOMIRROR () {
# Settings for ILO and mirror of disks
#mirroring is done if number of disk=2 and logical disk = 0
ILO_hostname="$hostname-ilo"
ILO_pwd="***REMOVED***"
ILO_ip=$iloipaddress
ILO_mask=$ilonetmask
ILO_gw=$gateway
log INFO "Settings for ilo are: $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname"
log INFO "Launching the command /usr/sbin/set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname and mirroring eventually the disks"
/usr/sbin/set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname
wait
}
#Functions to configure proliant servers
checkProliant () {
#check if proliant
check=$(dmidecode -s system-product-name | grep  ProLiant ||  echo 'NOK')
log WARN "Check Proliant result: $check"
if [[  "$check" != *"NOK"* ]]; then
echo "OK"
else
echo "NOK"
fi
}
SEND () {
perl -e '
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
my $REST = shift;
my $uri = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( "PUT", "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
' "$REST" "$URI"
}
createMonitorRecord () {
 status="$1"
 PK="[$salesOrder][$subid]"
 INSTALLATIONIP="<table class='collection table table-bordered'>
                        <tr><th>Dhcp ip</th><td>$clientIP</td></tr>
                        <tr><th>Cyclades:Port</th><td>$cycladesip : $cycladesport</td></tr>
                        <tr><th>Switch - Port</th><td>$switchip - $switchport</td></tr>
              </table>"
 URI="http://x.x.x.204/SPOT/provisioning/api/provisioningnotifications/$PK"
                            REST="{
        \"notifid\":\"$PK\",
        \"hostname\":\"$hostname\",
        \"installationip\":\"$INSTALLATIONIP\",
        \"configuredip\":\"$ipaddress\",
        \"status\":\"<b>$status</b>\",
        \"progress\":\"$PROGRESS\",
        \"image\":\"$ISO\",
        \"firmware\":\"$MANUFACTURER\",
        \"ram\":\"$RAM_tot\",
        \"cpu\":\"$NUMPROC\",
        \"diskscount\":\"$DISKCOUNT\",
        \"netintcount\":\"$NETCOUNT\",
        \"model\":\"$MODEL\",
        \"serial\":\"$MACHSERIAL\",
        \"os\":\"RedHat\"
        }"
        SEND  > /dev/null 2>&1
}
# Gets the cyclades and swithes values from DB
getEnv() {
Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
rack=$(echo $Rack | sed 's/[^0-9]//g')
#Rack=$(echo  "${Rack##${Rack%%?}}")
shelf=$(echo  "${Shelf##${Shelf%%?}}")
log INFO "About to download env values from http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"
URI="http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"
results=$(
perl - "$URI"  <<'_HERE_'
use Time::Piece;
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $WEB = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'GET', "$WEB" );
my $resp = $lwp->request($req);
my $decoded = decode_json($resp->content);
#my %recursive = ( $decoded->{rows} );
#print $req->as_string;
#print Dumper $resp;
#print Dumper $decoded->{rows}->[0]->{switchip};
my $switchip = $decoded->{rows}->[0]->{switchip};
my $bootpip = $decoded->{rows}->[0]->{bootpip};
my $cycladesip = $decoded->{rows}->[0]->{cycladesip};
my $cycladesport = $decoded->{rows}->[0]->{cycladesport};
my $switchport = $decoded->{rows}->[0]->{switchport};
my $rack = $decoded->{rows}->[0]->{rack};
my $shelf = $decoded->{rows}->[0]->{shelf};
print "$switchip\n$bootpip\n$cycladesip\n$cycladesport\n$switchport\n$rack\n$shelf\n";
_HERE_
)
#> /dev/null 2>&1
counter=1
for i in $results
do
case $counter in
1) switchip=$i;;
2) bootpip=$i;;
3) cycladesip=$i;;
4) cycladesport=$i;;
5) switchport=$i;;
6) rack=$i;;
7) shelf=$i;;
esac
counter=$((counter + 1))
done
}

LINUX_system () {
        NUMPROC=$(grep -c "physical id" </proc/cpuinfo | sort | uniq)
        MACHSERIAL=$(dmidecode -s system-serial-number | grep -v '#')
        MANUFACTURER=$(dmidecode -s system-manufacturer | grep -v '#')
        NETCOUNT=$(/usr/share/drbl/bin/get-nic-devs | wc -l)
        MODEL=$(dmidecode -s system-product-name | grep -v '#')
        RAM_tot=$(grep MemTotal /proc/meminfo | cut -d':' -f2 | cut -d 'k' -f1)
        RAM_tot=$(echo "$RAM_tot" | xargs)
        RAM_tot=$(( RAM_tot / 1000 ))

        NUMPROC=$(echo "$NUMPROC" | xargs )
        MACHSERIAL=$(echo "$MACHSERIAL" | xargs)
        MANUFACTURER=$(echo "$MANUFACTURER" | xargs)
        MODEL=$(echo "$MODEL" | xargs)
        DISKCOUNT=$(lsblk -o NAME -i -d -n -e 1,11 | wc -l)
}

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [--help] [-pos] [-t] [-ip] [-n] [-g]  [-s] [-h] [-iloip] [-ilonm]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Create mirror , configure ILO, get wwn fiber adresses. Prepare the machine and get data
  to configure on SAN storage, and store inventory in SPOT DB

  $(usage)

  Options:
  --help  Display this help message and exit.
  -pos Rack position or DHCP ip address of this client
  -t  Generic  iso image name (mounted in http web  dir)
  -ip  Ip address to assign after restoration
  -n   Netmask
  -g   Gateway
  -s  Sales order number (if any)
  -h  Hostname
  -iloip  Ip address to assign to ilo
  -ilonm  Netmask for ilo

  NOTE: 
         - You must be the superuser to run this script.
         - Only 2 parameters are mandatory:  -pos [Rack position/ Dhcp ip address] -t [ISO name]
         - Note that if the server is a Proliant, the mirror is automatically built if two disks are found

_EOF_
  return
}
# check IP address function
valid_ip() {
ERROR=0
    oldIFS=$IFS
    IFS=.
    set -f
    set -- $1
    if [ $# -eq 4 ]
    then
      for seg
      do
        case $seg in
            ""|*[!0-9]*) ERROR=1;break ;; ## Segment empty or non-numeric char
            *) [ $seg -gt 255 ] && ERROR=2 ;;
        esac
      done
    else
      ERROR=3 ## Not 4 segments
    fi
    IFS=$oldIFS
    set +f
    return $ERROR
}


log() {
local level=${1?}
shift
local code=0 
local line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

#LOG to web services
#Create one section for each web service
REST='{"title":"prepareDrmachine | '$subid'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'
(
perl - "$REST"  <<'_HERE_'
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $uri = "http://x.x.x.204/SPOT/provisioning/api/events";
my $REST = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'POST', "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
_HERE_
) > /dev/null 2>&1  

if [[ ! -z $rackPosition ]] && [[ ! -z $salesOrder ]] && [[ ! -z $subid ]]; then createMonitorRecord "$line"; fi

}

check_args() {
#put here the mandatory params

if [[ "$rackPosition" == $clientIP ]]; then
        Rack="Virtual"
        Shelf=$clientIP
 else
        # Get the rack and shelf variable
        Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
        Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
	getEnv
 fi
subid=$Rack"_"$Shelf



([[ -z "$ISO"  ]] ) && log ERROR "Some mandatory parameters missing!!!!!" && usage && error_exit "Review the usage"
 valid_ip "$ipaddress" && [ "$ERROR" -ne 0 ] && log ERROR "Ip address not valid" && exit 1
 valid_ip "$netmask" && [ "$ERROR" -ne 0 ] && log ERROR "Netmask not valid" && exit 1
 valid_ip "$gateway" && [ "$ERROR" -ne 0 ] && log ERROR "Gateway not valid" && exit 1
	# Check if is a generic image, contacting the webserver.
	RET=$(curl -o /dev/null --silent --head --write-out '%{http_code}'  $WEBSERVER/$ISO)
	if [ $RET -eq 404 ]; then
		log ERROR "The image $ISO doesn't exist, please check the name"
		WEBISO=$( w3m -dump $WEBSERVER | grep iso | awk -F "/" '{print $1}' | awk '{print $2}')
		log INFO "Possible values are:\n$WEBISO"
		exit 1
	fi
}
# check IP address function
valid_ip() {
ERROR=0
    oldIFS=$IFS
    IFS=.
    set -f
    set -- "$1"
    if [ $# -eq 4 ]
    then
      for seg
      do
        case $seg in
            ""|*[!0-9]*) ERROR=1;break ;; ## Segment empty or non-numeric char
            *) [ $seg -gt 255 ] && ERROR=2 ;;
        esac
      done
    else
      ERROR=3 ## Not 4 segments
    fi
    IFS=$oldIFS
    set +f
    return $ERROR
}

exec_cmd()
{
    if [[ ! -z $verbose ]]
    then
        log INFO "Running: $1"
    fi
    # TODO: is that the right way to do it?
    $1
    if [ $? != 0 ]
    then
        log ERROR"!! Error while running: $1 !!"
        error_exit "$PROGNAME: Error running $1 , stderr code $?"
    fi
}


# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Check for root UID
if [[ $(id -u) != 0 ]]; then
  error_exit "You must be the superuser to run this script."
fi

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    --help)
      help_message; graceful_exit ;;
    -pos)
        rackPosition="$2"
	;;
    -t)
	ISO="$2"
       ;;
    -ip)
	ipaddress="$2"
       ;;
    -n)
	netmask="$2" # You may want to check validity of $2
       ;;
    -g)
        gateway="$2"   # You may want to check validity of $2
       ;;
    -s)
	salesOrder="$2" # You may want to check validity of $2
       ;;
    -h)
	hostname="$2"   # You may want to check validity of $2
       ;;
    -iloip)
	iloipaddress="$2"
       ;;
    -ilonm)
        ilonetmask="$2"
       ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      ;;
  esac
  shift 2
done

PROGRESS=1

check_args

log INFO "Set defaults value if not specified in command line..."
# Set the defaults values
[[ -z "$hostname" ]] && hostname="nagrasrv01"                                                   && log INFO "Set the hostname to '$hostname'"
[[ -z "$ipaddress" ]] && ipaddress="10.0.133.$((RANDOM%=255))"                          && log INFO "Set the ip address to '$ipaddress'"
[[ -z "$netmask" ]] && netmask="255.255.255.0"                                                  && log INFO "Set the netmask to '$netmask'"
[[ -z "$gateway" ]] && gateway="10.0.133.252"
[[ -z "$ilohostname" ]] && ilohostname="ILO$hostname"                                           && log INFO "Assuming ilo hostname for proliant server equal to '$ilohostname'"
[[ -z "$iloipaddress" ]] && iloipaddress="10.0.133.$((RANDOM%=255))"                    && log INFO "Assuming ilo ip address for proliant server equal to '$iloipaddress'"
[[ -z "$ilonetmask" ]] && ilonetmask="255.255.255.0"                                            && log INFO "Assuming ilo netmask for proliant server equal to '$ilonetmask'"
[[ -z "$salesOrder" ]] && salesOrder="99999999"                                                 && log INFO "Set sales order to '$salesOrder'"


# Main logic
# contact time server and set the correct soft and hw time
PROGRESS=2

syncTime


#clientIP="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
#image=$ISO
#iso_full_input_path="$isoPATH/$ISO"   # You may want to check validity of $2
 # Workaround for NFS file STALE
#        while true; do mount -o remount,rw -a; sleep 10; done &

# Config proliant servers
PROGRESS=5
log INFO "Checking if the server is a proliant server...."
proliant=$(checkProliant)

if [[ "$proliant" == "OK" ]]; then
#Set ILO configuration
PROGRESS=10
log INFO "Set the ILO configuration and create the logical volume ....."

setILOMIRROR


fi

#the SSH execution is assured in the function
PROGRESS=20
log INFO "Executing Linux Inventory"
#inventoryLinux
LINUX_system

PROGRESS=30
log INFO "Getting Fiber wwn adresses...."
sleep 5

PROGRESS=100
    log WARN '\n'"$( for i in host0 host1 host2 host3;do echo port $i; cat  /sys/class/fc_host/$i/port_name 2>/dev/null;echo 1 > /sys/class/fc_host/$i/issue_lip 2>/dev/null;done;  hpssacli controller all show 2>/dev/null )"

#Clean remote comman table
perl /usr/local/bin/removeCommand.pl

graceful_exit
