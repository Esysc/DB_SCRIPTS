
In checkRacks line 54:
nimclient=$(ssh x.x.x.205 "lsnim -c machines | grep $rackPosition")
                                                       ^-- SC2029: Note that, unescaped, this expands on the client side.


In checkRacks line 55:
valid_ip $rackPosition
         ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 56:
 [[ -z "$nimclient" ]] &&  [ $ERROR -ne 0 ]   && log ERROR "Hey, this client doesn't exists ...! check your spelling" && exit 1
                             ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 60:
valid_ip $rackPosition
         ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 62:
clientIP=$(findIPMAC $rackPosition "IP" 2>/dev/null | head -1)
                     ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 64:
        ping -c 1 $clientIP  > /dev/null 2>&1
                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 172:
valid_ip $rack
         ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 180:
client_mac=$(echo "${client_mac,,}")
           ^-- SC2116: Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.


In checkRacks line 182:
                                                        echo  -e  $ip_client \\n
                                                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 185:
                                                                echo -e $client_mac \\n
                                                                        ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 194:
switch=$(echo $rack | awk -F "_" '{print $1}')
              ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 195:
floor=$(echo $rack | awk -F "_" '{print $2}')
             ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 202:
        if [[ "$switch" == "rack2" ]] ; then floor=$(echo $floor | sed 's/...../&2/g;s/2$//') ; fi
                                                     ^-- SC2001: See if you can use ${variable//search/replace} instead.
                                                          ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 203:
switch_port=$(echo "$switch_maps" | grep $floor | awk  '{print $2}')
                                         ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 206:
client_mac=$(perl /usr/sbin/switchlabel.pl $switch_ip public | grep -w "port $switch_port" | awk '{print $2}' )
                                           ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 212:
client_mac=$(echo "${client_mac,,}")
           ^-- SC2116: Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.


In checkRacks line 220:
                        sshpass -p ***REMOVED***  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=2 root@$b exit  >> /dev/null 2>&1
                                                                                                                                       ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 223:
                                                        echo  -e  $b \\n
                                                                  ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 226:
                                                                echo -e $i \\n
                                                                        ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 265:
REST='{"title":"'`basename $0`' | '$rackPosition'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'
                 ^-- SC2006: Use $(..) instead of deprecated `..`
                           ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 307:
nimclient=$(ssh x.x.x.205 "lsnim -c machines | grep $rackPosition")
                                                       ^-- SC2029: Note that, unescaped, this expands on the client side.


In checkRacks line 309:
 [[ -z "$nimclient" ]] &&  [ $ERROR -ne 0 ]   && log ERROR "Hey, this client doesn't exists ...! check your spelling" && exit 1
                             ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 317:
Rack=$(echo $Rack | sed 's/[^0-9]//g')
       ^-- SC2001: See if you can use ${variable//search/replace} instead.
            ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 319:
Shelf=$(echo  "${Shelf##${Shelf%%?}}")
      ^-- SC2116: Useless echo? Instead of 'cmd $(echo foo)', just use 'cmd foo'.


In checkRacks line 373:
2) bootpip=$i;;
   ^-- SC2034: bootpip appears unused. Verify it or export it.


In checkRacks line 383:
CYCLADES="rack"$rack"_shelf$shelf $cycladesip:$cycladesport"
               ^-- SC2027: The surrounding quotes actually unquote this. Remove or escape them.


In checkRacks line 402:
    set -- $1
           ^-- SC2086: Double quote to prevent globbing and word splitting.


In checkRacks line 438:
valid_ip $rackPosition 
         ^-- SC2086: Double quote to prevent globbing and word splitting.

