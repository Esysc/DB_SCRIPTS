#!/bin/bash
# ---------------------------------------------------------------------------
# installModules - Aim to install NSE , NGE, NRE and eventually NSM before to start the business environment managed by the CCT console.

# Copyright 2016, root <root@drbl01>
# All rights reserved.

# Usage: installModules [-h|--help] [-M|--module module] [-H|--host host] [-P|--password password] [-S|--selection platformType]

# Revision history:
# 2016-01-21 Created by template_generator ver. 3.3
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="0.1"
## Global Variables

typeset APISERVER="x.x.x.204" # IP address of the api server
log() {
  local level=${1?}
  shift
  local code=""
  local line="[$(date '+%F %T')] $level: $*"
  if [ -t 2 ]
  then
    case "$level" in
      INFO) code=36 ;;
      DEBUG) code=30 ;;
      WARN) code=33 ;;
      ERROR) code=31 ;;
      *) code=37 ;;
    esac
    echo -e "\e[${code}m${line}\e[0m"
  else
    echo "$line"
  fi >&2
  
  REST='{"title":"'`basename $0`' | '$rackPosition'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'
  (
perl - "$APISERVER" "$REST"  <<'_HERE_'
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $APISERVER = shift;
my $uri = "http://$APISERVER/SPOT/provisioning/api/events";
my $REST = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'POST', "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
_HERE_
  )  >/dev/null 2>&1
  
  
}

# Scp  function
scpExe () {
  # $1 client ip
  #
  # $2 source file
  # $3 target file
  host=$1
  log INFO "Start copying $2 to $host:$3 ..........."
  sshpass -p $password scp -r -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $2 root@$1:$3
  if [[ $? -ne 0 ]]
  then
    log ERROR "Cannot scp $2 file to client, every further action will be not possible so I exit right now!"
    error_exit
  fi
  log INFO "Successfully copied $2 to $host:$3 !!!"
  
}

sshExe() {
  # $1 client ip
  #
  # $2 command or function
  log INFO "Executing sshpass -p $password ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1  $2"
  sshpass -p $password ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 " $2" 
  if [[ $? -ne 0 ]]
  then
    log ERROR "Execution Error! May be ssh connection problem or execution of command'$2' issue. I will exit now."
    error_exit
  fi
  log INFO "Successfully executed $2 on remote $1"
}

getHostname() {

#Get the hostname of the conecerned host

rackPosition=$(sshExe $host hostname)

}

copyModules () {
  baseDir="/home/operator/delivery"
  #baseName=$(basename $module)
  #targetDir="$baseDir/$baseName"
  # Test if module exists before to start
  if [ -e $module ];then
    #good , the module has been found
    
    #Test if the remote host can be reached
    check=$(nmap -PN -p ssh $host | grep 'open')
    if [[ $check ==  "" ]]; then
      log ERROR "Cannot connect to $host, ssh port not open or host not reachable. Please, check  ip address, routing, or ssh service available on remote host. "
      error_exit
    fi
    #Good, all tests pased
    #Start copying..........
    scpExe $host $module $baseDir
    
  else
    log ERROR "Cannot find $module!!!"
    log ERROR "Check if packager is mounted locally"
    error_exit
  fi
  
  
}

remoteInstall () {
  
  #Test if the remote host can be reached
  check=$(nmap -PN -p ssh $host | grep 'open')
  if [[ $check ==  "" ]]; then
    log ERROR "Cannot connect to $host, ssh port not open or host not reachable. Please, check  ip address, routing, or ssh service available on remote host. "
    error_exit
  fi
  baseDir="/home/operator/delivery"
  baseName=$(basename $module)
  targetDir="$baseDir/$baseName"
  
CMD="
cd $targetDir
echo '#!/usr/bin/bash' > install_script.sh
echo 'source /home/root/.bashrc' >> install_script.sh
echo 'echo y | InstallSofts   $service $bundle $user' >> install_script.sh
chmod +x install_script.sh
"
  
  
log INFO "Going to create le script for installation.."

  sshExe  $host "$CMD"

log INFO "Going to install $module on $host .... "

CMD="
cd $targetDir
./install_script.sh | tee install_$baseName.log
rm -f install_script.sh
"
  sshExe  $host "$CMD"

log INFO "Installation terminated, check the install_$baseName.log files in $targetDir directory"
}

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  log ERROR  "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
    error_exit "Program interrupted by user" ;;
    TERM)
      log WARN  "\n$PROGNAME: Program terminated" >&2
    graceful_exit ;;
    *)
    error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  log INFO  "Usage: $PROGNAME [-h|--help] [-M|--module module] [-I|--install Yes/No] [-H|--host host] [-s|--service service] [-b|--bundle bundle] [-u|--user user] [-P|--password password] [-S|--selection platformType]"
  graceful_exit
}

help_message() {
  log WARN "
$PROGNAME ver. $VERSION
  Aim to install NSE , NGE, NRE and eventually NSM before to start the business environment managed by the CCT console.

  $(usage)

  Options:
  -h, --help  Display this help message and exit.
  -M, --module module  Path to the module to install. Ex /packager/delivery/Customers/ONO~1/MRLHE_2.2ONO3.0/RTM_6.5STD10-A5.
  -I, --install install Yes or NO
  -s, --service service  Service name , ex. rtmsoft (optional if install -> NO)
  -b, --bundle  bundle   Bundle name , ex. rtm1 (optional if install -> NO)
  -u, --user user User owner of that service , ex. operator, oracle,root etc... (optional if install -> NO)
  -H, --host host  addresse IP of the remote host
  -P, --password password  Root password on remote host  (optional, default to ***REMOVED***)
  -S, --selection platformType  Platform selection type  (optional, reserved for future use)

  NOTE: You must be the superuser to run this script.

  "
  return
}

test_args () {
  #put here the mandatory params only::
  [[ $module == "" ]] && log ERROR "Option -M is mandatory" && usage
  [[ $password == "" ]] && log INFO "Set the root password to '***REMOVED***'" && password="***REMOVED***"
  [[ $host == "" ]] && log ERROR "Option -H is mandatory" && usage
  [[ $install == "" ]] && log ERROR "Option -I is mandatory" && usage
  while true; do
    case $install in
      
      [Yy]* ) provision=1; break ;;
      [Nn]* ) provision=0; break ;;
      * ) log ERROR "Please answer [Yy]es or [Nn]o." ; usage;;
    esac
  done
  
  if [ $provision -eq 1 ]; then
    
    [[ $user == "" ]] && log ERROR "Option -u is mandatory" && usage
    [[ $service == "" ]] && log ERROR "Option -s is mandatory" && usage
    [[ $bundle == "" ]] && log ERROR "Option -b is mandatory" && usage
    
    
  fi
  
  
}
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Check for root UID
if [[ $(id -u) != 0 ]]; then
  error_exit "You must be the superuser to run this script."
fi

if [ $# -eq 0 ]; then
  usage
fi


# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    -h | --help)
    help_message; graceful_exit ;;
    -M | --module)
    shift; module="$1"; log INFO "Path to the module to install $module" ;;
    -H | --host)
    shift; host="$1"; log INFO "addresse IP of the host $host" ;;
    -I | --install)
    shift; install="$1"; log INFO "The software will be installed :  $install " ;;
    -s | --service)
    shift; service="$1"; log INFO "Will install in service $service" ;;
    -b | --bundle)
    shift; bundle="$1"; log INFO "Will install in bundle $bundle" ;;
    -u | --user)
    shift; user="$1"; log INFO "User name as installation user  $user" ;;
    -P | --password)
    shift; password="$1" ; log INFO "Root password on remote host $password" ;;
    -S | --selection)
    shift; platformType="$1" ; log INFO "Platform selection type $platformType" ;;
    -* | --*)
      error_exit "Unknown option $1"
    usage ;;
    *)
    log INFO "Argument $1 to process..." ;;
  esac
  shift
done

test_args
# Main logic

getHostname
copyModules
if [ $provision -eq 1 ]; then
  remoteInstall
fi

graceful_exit

