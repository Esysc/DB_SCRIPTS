#!/bin/bash 
# ---------------------------------------------------------------------------
# mondoWrapper - Restore comopletely mondoarchives to new physical/virtual machines using the existing PXE environment

# Copyright 2015, root <root@drbl01>
  
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# Usage: mondoWrapper [-h|--help] [-iso] [-ip] [-n] [-g] [-s] [-h] [-pos] [-iloip] [-ilonm]

# Revision history:
# 2015-04-23 Created by template_generator ver. 3.3
# Added time server synchronisation part 2015-05-12
# 2015-06-1  - Added support to GEN 9 servers (removed hpacu* and installed hpssa* )
# 2015-06-1  - Added  GrubInstall function to refresh grub installation
# 2015-06-17 - Removed   hyphens from function nameing convention, replace within underscore
# 2015-06-18 - Added check permission function to set the setuid on user
# 2015-08-07 - Right now the restore part is removed, only ILO and proliant mirroring will be done 
#	       because the format image has changed (mondo -> ks RH)
# ---------------------------------------------------------------------------

PROGNAME=${0##*/}
VERSION="2.7"
isoPATH="/lysis"
ISO_MOUNT_DIR="/media/"
output_directory="/mnt/RESTORING"
mount_directory="/lysis"
PACKAGER="/packager"

mount_me() {
mountlist=/tmp/tmp/mountlist.txt
if [ "$#" -ne "0" ] ;then
    echo "mount_me <no params>"
    echo "...mountlist is assumed to be at $mountlist"
    exit 1
fi

if [ ! -f "$mountlist" ] ; then
    echo "I cannot find the mountlist '$mountlist'. Aborting."
    exit 1
fi

paths=$(grep -vE " raid |lvm lvm" $mountlist | tr -s ' ' ' ' | cut -d' ' -f2 | sort)
> $mountlist.sorted
for i in $paths ; do
    grep " $i " $mountlist >> $mountlist.sorted
done
mount_subroutine_me < $mountlist.sorted


}


# Gets the cyclades and swithes values from DB
getEnv() {

Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
rack=$(echo $Rack | sed 's/[^0-9]//g')
#Rack=$(echo  "${Rack##${Rack%%?}}")
shelf=$(echo  "${Shelf##${Shelf%%?}}")


log INFO "About to download env values from http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"

URI="http://x.x.x.204/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$rack&Shelf_Equals=$shelf"

results=$(
perl - "$URI"  <<'_HERE_'
use Time::Piece;
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};

my $WEB = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'GET', "$WEB" );
my $resp = $lwp->request($req);
my $decoded = decode_json($resp->content);
#my %recursive = ( $decoded->{rows} );
#print $req->as_string;
#print Dumper $resp;
#print Dumper $decoded->{rows}->[0]->{switchip};
my $switchip = $decoded->{rows}->[0]->{switchip};
my $bootpip = $decoded->{rows}->[0]->{bootpip};
my $cycladesip = $decoded->{rows}->[0]->{cycladesip};
my $cycladesport = $decoded->{rows}->[0]->{cycladesport};
my $switchport = $decoded->{rows}->[0]->{switchport};
my $rack = $decoded->{rows}->[0]->{rack};
my $shelf = $decoded->{rows}->[0]->{shelf};
print "$switchip\n$bootpip\n$cycladesip\n$cycladesport\n$switchport\n$rack\n$shelf\n";
_HERE_
)
#> /dev/null 2>&1
counter=1
for i in $results
do
case $counter in
1) switchip=$i;;
2) bootpip=$i;;
3) cycladesip=$i;;
4) cycladesport=$i;;
5) switchport=$i;;
6) rack=$i;;
7) shelf=$i;;
esac
counter=$((counter + 1))
done
}


syncTime () {
step="Synching server time: "
log INFO "$step current date is $(date)"
log INFO "$step stopping the ntp service..."
service ntp stop
log INFO "$step contacting the x.x.x.204 server ..."
ntpdate x.x.x.204
log INFO "$step setting the hardware clock to UTC"
hwclock --systohc --utc


}



i_want_my_lvm() {
SDA1=$1
SDA2=$2

echo y | lvm pvcreate -ff "$SDA2"
vgscan

#Create and activate the VG's (volume groups).
vgcreate VolGroup00 -l 0 -p 0 -s 32.00m "$SDA2"
vgchange -a y VolGroup00

#Finally, create the LV's (logical volumes).

 echo y |  lvcreate -L 20480m -r auto -n swaplv VolGroup00
 echo y |  lvcreate -L 3072m -r auto -n LogVol00 VolGroup00
 echo y |  lvcreate -L 5120m -r auto -n usrlv VolGroup00
 echo y |  lvcreate -L 15360m -r auto -n homelv VolGroup00
 echo y |  lvcreate -L 20480m -r auto -n optlv VolGroup00
 echo y |  lvcreate -L 10240m -r auto -n tmplv VolGroup00
 echo y |  lvcreate -L 20480m -r auto -n datalv VolGroup00
 echo y |  lvcreate -L 40960m -r auto -n softlv VolGroup00
 echo y |  lvcreate -L 30720m -r auto -n u01lv VolGroup00

lvm vgscan
#Now you may format the LV's:-

mkswap /dev/VolGroup00/swaplv
ext=$(grep LogVol00 < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/LogVol00
ext=$(grep usrlv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/usrlv
ext=$(grep homelv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/homelv
ext=$(grep optlv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/optlv
ext=$(grep tmplv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/tmplv
ext=$(grep datalv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/datalv
ext=$(grep softlv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/softlv
ext=$(grep u01lv < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" /dev/VolGroup00/u01lv
ext=$(grep "$SDA1" < /tmp/tmp/mountlist.txt | awk '{print $3}')
mkfs -t "$ext" "$SDA1"


}

checkPermission() {
FILES="/bin/ping
/bin/mount
/bin/ping6
/bin/su
/bin/umount
/usr/sbin/suexec
/usr/sbin/userhelper
/usr/sbin/usernetctl
/usr/bin/chage
/usr/bin/newgrp
/usr/bin/crontab
/usr/bin/chfn
/usr/bin/at
/usr/bin/passwd
/usr/bin/sudo
/usr/bin/chsh
/usr/bin/gpasswd
/usr/bin/pkexec
/usr/bin/staprun
/usr/libexec/pt_chown
/usr/libexec/openssh/ssh-keysign
/usr/libexec/polkit-1/polkit-agent-helper-1
/sbin/mount.nfs
/sbin/pam_timestamp_check
/sbin/unix_chkpwd
/lib64/dbus-1/dbus-daemon-launch-helper"

for file in $FILES
do
log INFO "Setting setuid on file $output_directory/$file"
chmod u+s "$output_directory/$file" 2>/dev/null
sleep 1
done



}
mount_subroutine_me() {

echo "mount-subroutine-me --- starting"
if [ "$#" -ne "0" ] ; then
    echo "mount-subroutine-me < mountlist" 1
    exit 1
fi

# ----------- mount partitions to be restored to --------------

#echo "START mount_me"


read incoming
while [ "$incoming" != "" ] ; do
    partno=$(echo "$incoming" | cut -d' ' -f1)
    mountpt=$(echo "$incoming" | cut -d' ' -f2)
    mounttype=$(echo "$incoming" | cut -d' ' -f3)
    mountdir="/mnt/RESTORING$mountpt"
    if [ "$mounttype" = "swap" ] ; then
                swapon "$partno"
    else
        if [ -e "$mountdir" ] && [ ! -d "$mountdir" ] ; then
            echo "$mountdir exists (but not a dir). Deleting..." 2
            rm -f "$mountdir"
            mkdir -p "$mountdir"
        else
            echo "Making dir $mountdir..." 2
            mkdir -p "$mountdir"
        fi
            echo "$mountdir mounted ok." 2
        echo "Mounting $partno..." 2
                if [ -e "/tmp/MOUNT-READONLY" ] ; then
            mount "$partno" -t "$mounttype" -o ro "$mountdir"
        else
            mount "$partno" -t "$mounttype" "$mountdir"
        fi
                res=$(mount | grep "$partno")
                if [ "$res" = "" ] ; then
                echo "I think I failed to mount $partno" 3
                else
            echo "$partno mounted ok." 2
        fi
    fi
    read incoming
    [ "$incoming" != "" ] || read incoming
done

     echo "All partitions mounted ok." 3

echo "mount-subroutine-me --- leaving"


}

unmount_me() {

mountlist=/tmp/tmp/mountlist.txt

if [ "$#" -ne "0" ] ;then
    echo "unmount_me <no params>"
    echo "...mountlist is assumed to be at $mountlist"
    exit 1
fi

#unmount-subroutine-me < $mountlist
#unmount-subroutine-me < $mountlist

#for j in 1 2 ; do
for i in $(mount | grep /mnt/RESTORING | cut -d' ' -f3 | sort -r); do
    umount "$i"
done

for i in $(cut -d' ' -f1 /proc/swaps | grep /dev); do
    swapoff "$i"
done


}

runConfnet(){
chroot "$output_directory" /bin/bash -c /tmp/postinstall.sh
rm "$output_directory/tmp/postinstall.sh"
}
createConfnet () {


BROADCAST=$(ipcalc "$ipaddress/$netmask" | grep Broadcast | awk '{print $2}')
NETWORK=$(ipcalc "$ipaddress/$netmask" | grep Network | awk '{print $2}' | awk -F "/" '{print $1}')
confnetFile="$output_directory/tmp/postinstall.sh"
data=$(date)

confnetContent="
#!/bin/bash
echo '===================================================================================='
echo '=========                                                                   ========'
echo '=========                DRBL postinstall environment                       ========'
echo '=========       customisation script for '$rackPosition' '$hostname'        ========'
echo '=========                                                                   ========'
echo '=========                *****************************                      ========'
echo '=========                *****************************                      ========'
echo '=========                *****************************                      ========'
echo '=========                *****************************                      ========'
echo '=========                                                                   ========'
echo '===================================================================================='
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NETWORKING_IPV6=no
HOSTNAME=$hostname
GATEWAY=$gateway
EOF

cat > /etc/sysconfig/network-scripts//ifcfg-eth0 << EOF
DEVICE=eth0
BOOTPROTO=static
BROADCAST=$BROADCAST
IPADDR=$ipaddress
NETMASK=$netmask
GATEWAY=$gateway
NETWORK=$NETWORK
ONBOOT=yes
EOF


cat > /etc/resolv.conf << EOF
#
#
#      This file has been emptied by the post instal script to avoid unuseful behaviors
#
#
#
domain localdomain
EOF

echo $ipaddress $hostname'.localdomain' $hostname >> /etc/hosts
echo $gateway'      time' >> /etc/hosts
echo 'time' >> /etc/ntp/step-tickers
echo 'server time' >> /etc/ntp.conf
service ntpd restart
sleep 5
# To avoid umount crying on busy partition
service ntpd stop

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@        Added for NET
#echo '10.0.139.1       mlds01.localdomain' >> /etc/hosts
#cp /etc/rc.local /etc/rc.local.save


#cat > /etc/installpuppet << EOF
##!/bin/bash
#bash <(curl -s http://mlds01.localdomain:8080/installpuppet.sh)
#mv /etc/rc.local.save /etc/rc.local
#rm /etc/installpuppet
#EOF

#chmod 755 /etc/installpuppet

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@          End added for NET

echo Installation number:  $salesOrder performed on $data >> /home/root/.syp_log 

"

#Write the confnet file on server
ACTION=$(echo "$confnetContent" > $confnetFile)

if [[ $? -ne 0 ]]
then
log WARN "Cannot write confnet file for final customisation. Reason: $ACTION"
else
chmod +x $confnetFile

fi

}


setILOMIRROR () {
# Settings for ILO and mirror of disks
#mirroring is done if number of disk=2 and logical disk = 0
ILO_hostname="ILO$hostname"
ILO_pwd="***REMOVED***"
ILO_ip=$iloipaddress
ILO_mask=$ilonetmask
ILO_gw=$gateway
log INFO "Settings for ilo are: $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname"
log INFO "Launching the command /usr/sbin/set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname and mirroring eventually the disks"
/usr/sbin/set_ilo_mirror.sh $ILO_ip $ILO_mask $ILO_gw $ILO_pwd $ILO_hostname
wait
log INFO "Results for script: $Set"

}


#Functions to configure proliant servers

checkProliant () {

#check if proliant
check=$(dmidecode -s system-product-name | grep  ProLiant ||  echo 'NOK')
log WARN "Check Proliant result: $check"
if [[  "$check" != *"NOK"* ]]; then
echo "OK"
else
echo "NOK"
fi

}

SEND () {


perl -e '
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
my $REST = shift;
my $uri = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( "PUT", "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
' "$REST" "$URI"


}

createMonitorRecord () {
 status="$1"
 PK="[$salesOrder][$rackPosition]"
 INSTALLATIONIP="<table class='collection table table-bordered'>
                        <tr><th>Dhcp ip</th><td>$clientIP</td></tr>
                        <tr><th>Cyclades:Port</th><td>$cycladesip : $cycladesport</td></tr>
                        <tr><th>Switch - Port</th><td>$switchip - $switchport</td></tr>
              </table>"

 URI="http://x.x.x.204/SPOT/provisioning/api/provisioningnotifications/$PK"

                            REST="{
        \"notifid\":\"$PK\",
        \"hostname\":\"$hostname\",
        \"installationip\":\"$INSTALLATIONIP\",
        \"configuredip\":\"$ipaddress\",
        \"status\":\"<b>$status</b>\",
        \"progress\":\"$PROGRESS\",
        \"image\":\"$image\",
        \"firmware\":\"$MANUFACTURER\",
        \"ram\":\"$RAM_tot\",
        \"cpu\":\"$NUMPROC\",
        \"diskscount\":\"$DISKCOUNT\",
        \"netintcount\":\"$NETCOUNT\",
        \"model\":\"$MODEL\",
        \"serial\":\"$MACHSERIAL\",
        \"os\":\"RedHat\"
        }"
        SEND > /dev/null 2>&1 

}

LINUX_system () {
        NUMPROC=$(grep -c "physical id" </proc/cpuinfo | sort | uniq)
        MACHSERIAL=$(dmidecode -s system-serial-number | grep -v '#')
        MANUFACTURER=$(dmidecode -s system-manufacturer | grep -v '#')
        NETCOUNT=$(/usr/share/drbl/bin/get-nic-devs | wc -l)
        MODEL=$(dmidecode -s system-product-name | grep -v '#')
        RAM_tot=$(grep MemTotal /proc/meminfo | cut -d':' -f2 | cut -d 'k' -f1)
        RAM_tot=$(echo "$RAM_tot" | xargs)
        RAM_tot=$(( RAM_tot / 1000 ))

        NUMPROC=$(echo "$NUMPROC" | xargs )
        MACHSERIAL=$(echo "$MACHSERIAL" | xargs)
        MANUFACTURER=$(echo "$MANUFACTURER" | xargs)
        MODEL=$(echo "$MODEL" | xargs)
        DISKCOUNT=$(lsblk -o NAME -i -d -n -e 1,11 | wc -l)
}



setLocale() {
[ ! -d $output_directory/proc ] && mkdir $output_directory/proc
[ ! -d $output_directory/sys ] && mkdir $output_directory/sys
mount -t proc none $output_directory/proc
mount -t sysfs sys $output_directory/sys
chroot $output_directory /bin/bash -c "localedef -i en_US -f UTF-8 en_US.UTF-8 && exit"
umount $output_directory/proc
umount $output_directory/sys
}

InstallGrub() {
log INFO "About to install Grub..."
grub-install --boot-directory=$output_directory/boot/grub /dev/sda

[ ! -d $output_directory/proc ] && mkdir $output_directory/proc
[ ! -d $output_directory/sys ] && mkdir $output_directory/sys
mount -t proc none $output_directory/proc
mount -t sysfs sys $output_directory/sys
(chroot $output_directory /bin/bash -c "grub-install  /dev/sda && exit" && log INFO "Grub installed ok!!!!") || log ERR "Grub installation had errors"
umount $output_directory/proc
umount $output_directory/sys



}

clean_up() { # Perform pre-exit housekeeping
  return
}

error_exit() {
  echo -e "${PROGNAME}: ${1:-"Unknown Error"}" >&2
  clean_up
  exit 1
}

graceful_exit() {
  clean_up
  exit
}

signal_exit() { # Handle trapped signals
  case $1 in
    INT)
      error_exit "Program interrupted by user" ;;
    TERM)
      echo -e "\n$PROGNAME: Program terminated" >&2
      graceful_exit ;;
    *)
      error_exit "$PROGNAME: Terminating on unknown signal" ;;
  esac
}

usage() {
  echo -e "Usage: $PROGNAME [--help] [-pos] [-t] [-ip] [-n] [-g] [-s] [-h] [-iloip] [-ilonm]"
}

help_message() {
  cat <<- _EOF_
  $PROGNAME ver. $VERSION
  Restore comopletely mondoarchives to new physical/virtual machines using the existing PXE environment

  $(usage)

  Options:
  --help  Display this help message and exit.
  -pos Rack position or DHCP ip address of this client
  -t  Mondoarchive iso image name (in lysis dir)
  -ip  Ip address to assign after restoration
  -n  Netmask
  -g  Gateway
  -s  Sales order number (if any)
  -h  Hostname
  -iloip  Ip address to assign to ilo
  -ilonm  Netmask for ilo

  NOTE: 
         - You must be the superuser to run this script.
         - Only 2 parameters are mandatory:  -pos [Rack position/ Dhcp ip address] -t [ISO name]
         - Note that if the server is a Proliant, the mirror is automatically built if two disks are found

_EOF_
  return
}


log() {
local level=${1?}
shift
local code=0 
local line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

#LOG to web services
#Create one section for each web service

REST='{"title":"mondoWrapper | '$rackPosition'","content":"'$line'","userid":"'$(whoami)'","date":"'$(date)'"}'
(
perl - "$REST"  <<'_HERE_'
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};
my $uri = "http://x.x.x.204/SPOT/provisioning/api/events";
my $REST = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'POST', "$uri" );
$req->content($REST);
my $resp = $lwp->request($req);
print $req->as_string;
#print Dumper $resp;
_HERE_
) > /dev/null 2>&1  

if [[ ! -z $rackPosition ]] && [[ ! -z $salesOrder ]]; then createMonitorRecord "$line"; fi

}

check_args() {



#put here the mandatory params

([[ -z "$ISO"  ]] ) && log ERROR "Some mandatory parameters missing!!!!!" && usage && error_exit "Review the usage"
 valid_ip "$ipaddress" && [ "$ERROR" -ne 0 ] && log ERROR "Ip address not valid" && exit 1
 valid_ip "$netmask" && [ "$ERROR" -ne 0 ] && log ERROR "Netmask not valid" && exit 1
 valid_ip "$gateway" && [ "$ERROR" -ne 0 ] && log ERROR "Gateway not valid" && exit 1
 [[ ! -f "$isoPATH/$ISO" ]] && log ERROR "The image $ISO doesn't exist, please check the name" && log INFO "Possible values are:\n$(ls $isoPATH | grep iso)" &&  exit 1
 #check valid client

}

# check IP address function
valid_ip() {
ERROR=0
    oldIFS=$IFS
    IFS=.
    set -f
    set -- "$1"
    if [ $# -eq 4 ]
    then
      for seg
      do
        case $seg in
            ""|*[!0-9]*) ERROR=1;break ;; ## Segment empty or non-numeric char
            *) [ $seg -gt 255 ] && ERROR=2 ;;
        esac
      done
    else
      ERROR=3 ## Not 4 segments
    fi
    IFS=$oldIFS
    set +f
    return $ERROR
}

exec_cmd()
{
    if [[ ! -z $verbose ]]
    then
        log INFO "Running: $1"
    fi
    # TODO: is that the right way to do it?
    $1
    if [ $? != 0 ]
    then
        log ERROR"!! Error while running: $1 !!"
        error_exit "$PROGNAME: Error running $1 , stderr code $?"
    fi
}


uncompress_afio()
{
    exec_cmd "cd $output_directory"
    exec_cmd "afio -i -x -v $ISO_MOUNT_DIR/archives/0.afio.bz2"
    files=( $ISO_MOUNT_DIR/archives/*.afio.bz2 )
    for afio_file in  "${files[@]}"
    do
	log INFO "Decompressing $afio_file ...."
        exec_cmd "afio -i -x -v  $afio_file"
    done
}

# uncompressing bz2 archives made by mondoarchive
uncompress_bz2()
{
    exec_cmd "cd $output_directory"
    PROGRESS="65"
    log INFO "Uncompressing bzip files..... be zen and wait..."
  
    find -type f -name '*.z' -exec bunzip2 {} \; 2> /dev/null
    PROGRESS="75"
    log INFO "Renaming all *.z.out files...."
    find -type f -name '*.z.out' | while read f; do mv "$f" "${f%.z.out}"; done
    log INFO "Set the right permission on system files:"
    checkPermission
}

mondoRestore() {

#Unmount unueseful dirs
ismounted=$(grep $PACKAGER < /proc/mounts)
if [[ "$ismounted" != "" ]]; then
	exec_cmd "umount $PACKAGER"
fi

iso_full_backup_path="$1"
output_directory="$2"

if [[ ! -d "$ISO_MOUNT_DIR" ]]
then
    exec_cmd "mkdir $ISO_MOUNT_DIR"
fi

# unmounting just in case something else was mounted on it
if grep -qs "$ISO_MOUNT_DIR" /proc/mounts
then
    exec_cmd "umount $ISO_MOUNT_DIR"
fi
# backing up full ISO
exec_cmd "mount -o loop,ro $iso_full_backup_path $ISO_MOUNT_DIR"
uncompress_afio


sleep 1 # workarounds umount: /mnt/iso: device is busy
exec_cmd "umount $ISO_MOUNT_DIR"


#Umount the lysis directory, we don't need anymore

sleep 1
ismounted=$(grep " $isoPATH" < /proc/mounts)
if [[ "$ismounted" != "" ]]; then
	exec_cmd "umount $isoPATH"
fi



uncompress_bz2
exec_cmd "cd /"

log INFO 'MONDOARCHIVE RESTORE Done !!!!'



}
# Trap signals
trap "signal_exit TERM" TERM HUP
trap "signal_exit INT"  INT

# Check for root UID
if [[ $(id -u) != 0 ]]; then
  error_exit "You must be the superuser to run this script."
fi

# Parse command-line
while [[ -n $1 ]]; do
  case $1 in
    --help)
      help_message; graceful_exit ;;
    -pos)
        rackPosition="$2"
	log INFO "Rack position / Dhcp ip address: $rackPosition";;
    -t)
	ISO="$2"
      log INFO "mondoarchive iso image: $ISO" ;;
    -ip)
	ipaddress="$2"
      log INFO "Ip address to assign after restoration: $ipaddress" ;;
    -n)
	netmask="$2" # You may want to check validity of $2
      log INFO "Netmask: $netmask" ;;
    -g)
	gateway="$2"   # You may want to check validity of $2
      log INFO "Gateway: $gateway" ;;
    -s)
	salesOrder="$2" # You may want to check validity of $2
      log INFO "Sales order number (if any): $salesOrder" ;;
    -h)
	hostname="$2"   # You may want to check validity of $2
      log INFO "Hostname: $hostname" ;;
    -iloip)
	iloipaddress="$2"
      log INFO "Ip address to assign to ilo: $iloipaddress" ;;
    -ilonm)
        ilonetmask="$2"
      log INFO "Netmask for ilo: $ilonetmask" ;;
    -* | --*)
      usage
      error_exit "Unknown option $1" ;;
    *)
      log INFO "Argument $1 to process..." ;;
  esac
  shift 2
done

check_args
getEnv


log INFO "Set defaults value if not specified in command line..."
# Set the defaults values
[[ -z "$hostname" ]] && hostname="nagrasrv01"                                                   && log INFO "Set the hostname to '$hostname'"
[[ -z "$ipaddress" ]] && ipaddress="10.0.133.$((RANDOM%=255))"                          && log INFO "Set the ip address to '$ipaddress'"
[[ -z "$netmask" ]] && netmask="255.255.255.0"                                                  && log INFO "Set the netmask to '$netmask'"
[[ -z "$gateway" ]] && gateway="10.0.133.252"                                                   && log INFO "Set the gateway to '$gateway'"
[[ -z "$ilohostname" ]] && ilohostname="ILO$hostname"                                           && log INFO "Assuming ilo hostname for proliant server equal to '$ilohostname'"
[[ -z "$iloipaddress" ]] && iloipaddress="10.0.133.$((RANDOM%=255))"                    && log INFO "Assuming ilo ip address for proliant server equal to '$iloipaddress'"
[[ -z "$ilonetmask" ]] && ilonetmask="255.255.255.0"                                            && log INFO "Assuming ilo netmask for proliant server equal to '$ilonetmask'"
[[ -z "$salesOrder" ]] && salesOrder="99999999"                                                 && log INFO "Set sales order to '$salesOrder'"


# Main logic

# contact time server and set the correct soft and hw time
syncTime


clientIP="$( ifconfig | awk '/inet addr/{print substr($2,6)}' | sort | head -n 1 )"
image=$ISO
iso_full_input_path="$isoPATH/$ISO"   # You may want to check validity of $2
 # Workaround for NFS file STALE
#        while true; do mount -o remount,rw -a; sleep 10; done &

# Config proliant servers
PROGRESS=5
log INFO "Checking if the server is a proliant server...."
proliant=$(checkProliant)
if [[ "$proliant" == "OK" ]]; then
#Set ILO configuration
PROGRESS=10
log INFO "Set the ILO configuration and create the logical volume ....."

setILOMIRROR

fi

#the SSH execution is assured in the function
PROGRESS=20
log INFO "Executing Linux Inventory"
#inventoryLinux
LINUX_system

PROGRESS=30
log INFO "Try to mount the virtual media for you..."
xml='
<RIBCL VERSION="2.0">
   <LOGIN USER_LOGIN="adminname" PASSWORD="password">
      <RIB_INFO MODE="write">
         <!--        Firmware support information for next tag:           -->
         <!--            iLO 4 - All versions.                            -->
         <!--            iLO 3 - All versions.                            -->
         <!--            iLO 2 - All versions.                            -->
         <INSERT_VIRTUAL_MEDIA DEVICE="CDROM" IMAGE_URL="http://x.x.x.203/lysis/'$ISO'" />
      </RIB_INFO>
   </LOGIN>
</RIBCL>

'
echo "$xml" | hponcfg -i
PROGRESS=40

log INFO "Setting the boot once param for $ISO"
xml='
<RIBCL VERSION="2.0">
   <LOGIN USER_LOGIN="adminname" PASSWORD="password">
      <RIB_INFO MODE="write">

         <!--        Firmware support information for next tag:         -->
         <!--            iLO 4 - All versions.                          -->
         <!--            iLO 3 - All versions.                          -->
         <!--            iLO 2 - All versions.                          -->
         <SET_VM_STATUS DEVICE="CDROM">
            <VM_BOOT_OPTION VALUE="BOOT_ONCE"/>
            <VM_WRITE_PROTECT VALUE="YES" />
         </SET_VM_STATUS>
      </RIB_INFO>
   </LOGIN>
</RIBCL>
'

echo "$xml" | hponcfg -i



PROGRESS=100
# Reboot to installed image
log INFO "GOOD: ILO is configured and boot mode is now legacy mode. <br />You can connect to remote ILO via $ILO_ip  and boot the $ISO mounted as virtual media cdrom.<br />
Note that in the bios you need to set usb 3 option form 'auto' to 'disabled' to have virtual media working correctly.<br />Conect to server via the console and launch the reset manually."



graceful_exit

