#!/bin/bash


#
#
# setPassworuSubnet v 1.1
# Set the customized passwords on system
# Author ACS 2014



log() {
local level=${1?}
shift
local code= line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

                                REST='{"title":"setPasswordssubnet ","content":"'$line'","userid":"'`whoami`'","date":"'`date`'"}'
                                (
perl - "$REST"   <<'_HERE_'
                                 use integer;
                                 use POSIX qw(strftime);
                                 use Backticks;
                                 use Data::Dumper;
                                 use Sys::Hostname;
                                 use Socket;
                                 use LWP::UserAgent;
                                 use LWP::Simple;
                                 use strict;
                                 use warnings;
                                 use integer;
                                 use Switch;
                                 use JSON ;
                                 use feature qw(switch);
                                 use HTTP::Cookies;
                                 use HTTP::Request;
                                 use LWP;
                                 use File::Path qw{mkpath};
                                 my $uri = "http://x.x.x.204/SPOT/provisioning/api/events";
                                 my $REST = shift;
                                 my $lwp = LWP::UserAgent->new(
                                                 timeout               => 10,
                                                 );
                                 my $req = HTTP::Request->new( 'POST', "$uri" );
                                 $req->content($REST);
                                 my $resp = $lwp->request($req);
                                 print $req->as_string;
_HERE_
                                 )  2>&1 >/dev/null

}


sendToTable() {
                               htmlTable=`echo $htmlTable | tr -d '\n\r'`
			       TIME=`date +'%F %T'`
                               REST='{"salesorder":"'$salesorder'","results":"'$htmlTable'","time":"'$TIME'"}'
                                (
perl - "$REST"  "$salesorder"  <<'_HERE_'
                                 use integer;
                                 use POSIX qw(strftime);
                                 use Backticks;
                                 use Data::Dumper;
                                 use Sys::Hostname;
                                 use Socket;
                                 use LWP::UserAgent;
                                 use LWP::Simple;
                                 use strict;
                                 use warnings;
                                 use integer;
                                 use Switch;
                                 use JSON ;
                                 use feature qw(switch);
                                 use HTTP::Cookies;
                                 use HTTP::Request;
                                 use LWP;
                                 use File::Path qw{mkpath};
                                 my $REST = shift;
                                 my $salesorder = shift;
                                 my $uri = "http://x.x.x.204/SPOT/provisioning/api/tblpassword/$salesorder";
                                 my $lwp = LWP::UserAgent->new(
                                                 timeout               => 10,
                                                 );
                                 my $req = HTTP::Request->new( 'PUT', "$uri" );
                                 $req->content($REST);
                                 my $resp = $lwp->request($req);
                                 print $req->as_string;
                                 print Dumper $resp;
_HERE_
                                 )



}

# Usage function
usage () {
        log INFO "usage $0
                -root [new root password ]
                -operator  [new operator password]
                -oracle [new oracle password ]
                -oldroot [the root password to use to change the others
                -oldoperator [the old operator pass ]
                -so [salesorder string (salesorder| customer ACR)]
		-ip [ip address alias of this executing machine]
		-netmask [ the netmask]
                "
                exit 1
}

check_args() {
        [ $args -ne 16 ]  && log ERROR "There are not enough arguments, they need to be 16." && usage && exit 1

}




################################################################################
# Executes command with a timeout
# Params:
#   $1 timeout in seconds
#   $2 command
# Returns 1 if timed out 0 otherwise
TIMEOUT() {

	            TIME=$1

                    # start the command in a subshell to avoid problem with pipes
                    # (spawn accepts one command)
                    command="/bin/sh -c \"$2\""

                    expect -c "set echo \"-noecho\"; set timeout $TIME; spawn -noecho $command; expect timeout { exit 1 } eof { exit 0 }"


}
sshExe() {
# $1 client ip
#
# $2 command or function
# No password required because we run on drbl server
        sshpass -p $oldroot ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -f root@$1 " $2"
                if [[ $? -ne 0 ]]
                        then
                                log ERROR "Execution Error! May be ssh connection problem or execution of command'$2' issue. I will exit now."
                                log ERROR "The command was: ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -t root@$1 \" $2\""
                                exit 299
                                fi
}

aixPassword () {
        aix_cmd=" uname -L | cut -d' ' -f2 && exit"
		log WARN "Aix function hostname $host_name"
                        Sn=`sshExe $host "$aix_cmd"`
                                comments=$Sn
                                line=`cat /tmp/pass.$random`
                                OS="Unix"
                                for t in $line; do
                                        user=`echo $t | awk -F ":" '{print $1}'`
                                                password=`echo $t | awk -F ":" '{print $2}'`
                                                if [[ "$user"  =~ "root" ]]; then
                                                        password_root=$password
                                                                client_pass="$oldroot"
                                                else
                                                        client_pass=$root
                                                                fi
                                                                tblpass=$password
                                                                log INFO "About to change password on a AIX server"
								 ret=""
								ret=`sshpass -p $client_pass  $ssh  root@$host "id -u $user 2>&1 >/dev/null &&  echo 'EXISTS' || echo 'ERROR'"`
                                                                log WARN "The return value if $user exist is: $ret"
                                                                if [[ "$ret" == "EXISTS"  || "$ret" == "" ]]; then
                                                                `sshpass -p $client_pass  $ssh  root@$host "echo $t | chpasswd  -c 2>&1 /dev/null"`
                                                                if [ $? -eq 0 ]; then
                                                                tableMiddle
                                                                        fi
                                                                        fi
                                                                                done
}

linPassword () {
        linux_cmd=" dmidecode -s system-serial-number | grep -v \"\#\""
      #  host_name=`sshExe $host hostname`
                Sn=`sshExe $host "$linux_cmd 2>/dev/null"`
                comments=$Sn
                line=`cat /tmp/pass.$random`
                OS="Unix"
                for t in $line; do
                        user=`echo $t | awk -F ":" '{print $1}'`
                                password=`echo $t | awk -F ":" '{print $2}'`
                                if [[ "$user"  =~ "root" ]]; then
                                        password_root=$password
                                                client_pass="$oldroot"
                                else
                                        client_pass=$root
                                                fi
                                        tblpass=$password
#Password need to apply dinamically because we use ssh
                                                 log INFO "About to change password on a Linux server"
						 ret=""
						ret=`sshpass -p $client_pass  $ssh  root@$host "id -u $user 2>&1 >/dev/null &&  echo 'EXISTS' || echo 'ERROR'"`
                                                                log WARN "The return value if $user exist is: $ret"
                                                                if [[ "$ret" == "EXISTS"  || "$ret" == "" ]]; then

                                                `sshpass -p $client_pass  $ssh  root@$host "echo $t | chpasswd  2>&1 /dev/null"`
                                                if [ $? -eq 0 ]; then
                                                tableMiddle
                                                        fi
                                                        fi

                                                                done


}


winPassword () {
        host_name=`nmblookup -A $host | grep '<00> -     '  | awk '{print $1}' | head -1`
                host_name=${host_name,,}
                log INFO "Customizing host $host_name , os $os"
        Sn=`winexe  -U administrator%$oldroot //$host   "cmd /C wmic.exe bios get serialnumber <NUL:" | head -2 | tail -1`
                comments=$Sn
                line=`cat /tmp/pass.win.$random`
                OS="Windows"
                for t in $line; do
                        user=`echo $t | awk -F ":" '{print $1}'`
                                old_pass=`echo $t | awk -F ":" '{print $2}'`
                                new_pass=`echo $t | awk -F ":" '{print $3}'`
                                tblpass=$new_pass
                                log INFO "About tu run winexe -U $user%$old_pass //$host 'net user $user $new_pass'"
                                `winexe -U $user%$old_pass //$host "net user $user $new_pass" > /dev/null`
                                                if [ $? -eq 0 ]; then

                                                tableMiddle
                                                fi
                                                done

}

tableHeader () {
 htmlTable="$htmlTable<table id=\\\"listing_smaller\\\"><thead><tr>
        <th bgcolor=#5dc3f2>System ID</th>
        <th bgcolor=#5dc3f2>Customer</th>
        <th bgcolor=#5dc3f2>Region</th>
        <th bgcolor=#5dc3f2>Site</th>
        <th bgcolor=#5dc3f2>Technology</th>
        <th bgcolor=#5dc3f2>Resource Type</th>
        <th bgcolor=#5dc3f2>Keyword</th>
        <th bgcolor=#5dc3f2>Resource Name  (locked)</th>
        <th bgcolor=#5dc3f2>Username</th>
        <th bgcolor=#5dc3f2>Password</th>
        <th bgcolor=#5dc3f2>Phone</th>
        <th bgcolor=#5dc3f2>Ip Address</th>
        <th bgcolor=#5dc3f2>Comments</th>
        <th bgcolor=#5dc3f2>Connection Type</th>
        </tr></thead><tbody>"

}
tableMiddle () {
 htmlTable="$htmlTable<tr>
                                                <td>$system_id</td>
                                                <td>$customer</td>
                                                <td>$region</td>
                                                <td>$site</td>
                                                <td>$technology</td>
                                                <td>$OS</td>
                                                <td>$host_name</td>
                                                 <td bgcolor=#FDE9D9>=(CONCATENATE(A$index_table,\\\" \\\", G$index_table))</td>
                                                <td>$user</td>
                                                <td>$tblpass</td>
                                                <td>$phone</td>
                                                <td>$host</td>
                                                <td>$comments</td>
                                                <td>$connection_type</td>
                                                </tr>"

                                                index_table=`expr $index_table + 1`
}
tableFooter () {
htmlTable="$htmlTable</tbody></table>"
}

args=$#
check_args


################################################################################
# Check if the hostname is already
# in the table of hosts processed
# Return 0 if not processed, otherwise 1 

CheckHost() {
		   already_done=0
		   #NOTCHANGE="vio"
		   for host_index in $host_name_ctrl; do
		   case "$1" in
		   "$host_index" ) 
		    log WARN "Skipping "$1", already changed passwords"
		   already_done=1
                   break
		   ;;
		   "" )
		   log WARN "Skipping because the hostname return empty (no connection)"
                   already_done=1
		   break
		   ;;
		   vio* )
                   log WARN "Skipping "$1", is a vio host"
		   break
                   already_done=1
		   ;;
		   * )
                   log INFO "The host $1 is new, going to customize passwords....."
		   break 
		   ;;
		   esac
		   done
		   echo $already_done

}
mask2cdr ()
{
	   # Assumes there's no "255." after a non-255 byte in the mask
	   local x=${1##*255.}
	      set -- 0^^^128^192^224^240^248^252^254^ $(( (${#1} - ${#x})*2 )) ${x%%.*}
	         x=${1%%$3*}
		    echo $(( $2 + (${#x}/4) ))
}

sshExchange() {
ssh_password.sh exchange $oldroot $host
}

while true
do
case "$1" in
-root )
root="$2" # You may want to check validity of $2
shift 2
;;
-operator )
operator="$2"   # You may want to check validity of $2
shift 2
;;
-oracle )
oracle="$2"   # You may want to check validity of $2
shift 2
;;
-oldroot )
oldroot="$2"
shift 2
;;
-oldoperator )
oldoperator="$2"
shift 2
;;
-so)
so="$2"
shift 2
;;
-ip)
ip="$2"
shift 2
;;
-netmask)
netmask="$2"
shift 2
;;
*)      break
;;
esac
done


## Take sales order and ACR values
customer=`echo $so  | awk -F "|" '{print $2}'`
salesorder=`echo $so  | awk -F "|" '{print $1}'`


technology=" "
system_id="  " 
customer=$customer
region="  "
phone="  "
connection_type="  "
site="  " 
PASSWORD=$oldroot
OPASSWORD=$oldoperator
random=`date '+%s'`
po=$salesorder
master_ip=$ip
pattern=" "
comments=" "
ssh="ssh  -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet "
ssh_v7000="sshpass -p ***REMOVED*** ssh -f -o GSSAPIAuthentication=no -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet "

touch /tmp/mess.$random
cat > /tmp/pass.$random << EOF
root:$root
operator:$operator
oracle:$oracle
EOF
cat > /tmp/pass.win.$random << EOF
Administrator:$PASSWORD:$root
operator:$OPASSWORD:$operator
EOF
cat > /tmp/pass.v7000.$random << EOF
superuser:$root
EOF

tableHeader
index_table=2


host_name_ctrl="start_hosts mgt-ai fw01"
port_list="514 17988 22 80 4899 5989"
#CIDR=`mask2cdr $netmask`
myhost_name="mgt-ai"
NETWORK=` ipcalc $master_ip $netmask  | grep Network: | awk  '{print $2}'`
all_host=`nmap -nsP $NETWORK 2>/dev/null | grep Nmap | awk '{print $5}' | grep -v address | grep -v http`
                #Start loop on all host found on network
		for host in $all_host
		do
			log INFO "Checking host: $host"
			 #Check if the host is not the server
			 if [[ !  "$master_ip" == "$host" && ! "$all_host" == "address" ]]; then
                		         #Check if AIX
	 
			                 if  [[ `nmap -p 514 $host  | grep open` && `nmap -p 513 $host  | grep open` && `nmap -p 512 $host  | grep open` ]]; then 
					 log WARN "Detected AIX node"
					 NAME=`sshpass -p $PASSWORD $ssh  root@$host uname 2>/dev/null`
					#log WARN "NAME $NAME"
					 if [[ "$NAME" =~ "AIX" ]]; then 
					 host_name=`sshpass -p $PASSWORD $ssh root@$host hostname`
						if [ $? -eq 0 ]; then 
				 	 	already_done=`CheckHost $host_name`	
						if [[ ! "$already_done" == "1" &&  ! "$host_name" == $myhost_name ]]; then 
					 	host_name_ctrl=$host_name_ctrl" "$host_name
						aixPassword
					fi
					fi
					fi
					#End AIX
					#Check if windows
					 
                       			elif  [[ `nmap -p 4899 $host | grep open` || `nmap -p 3389 -PN $host | grep open` ]];
                    			then  
					log WARN "Detected Windows node"
					host_name=`nmblookup -A $host | grep '<00> -     '  | awk '{print $1}'`
			   		host_name=${host_name,,}
			#		echo $host_name "windows"
					already_done=`CheckHost $host_name`
					if [[ ! "$already_done" == "1" &&  ! "$host_name" == $myhost_name ]]; then
					host_name_ctrl=$host_name_ctrl" "$host_name
					winPassword
                                                fi
				   	#End Check Windows	
					#Check if storwizev7000
					elif  [[ `nmap -p 80 $host | grep open` && `nmap -p 5989 $host | grep open` ]];
					then 
					log WARN "Detected Storwize SAN"
					host_name=`$ssh_v7000 superuser@$host lssystemip 2>/dev/null | tail -1 | awk '{print $2}'`
				 	already_done=`CheckHost $host_name`							
					if [[ ! "$already_done" == "1" &&  ! "$host_name" == $myhost_name ]]; then
					host_name_ctrl=$host_name_ctrl" "$host_name
					Sn=`sshpass -p $PASSWORD $ssh  superuser@$host lsenclosure 2>/dev/null | tail -1 | awk '{print $8}'`
					comments=$Sn
					line=`cat /tmp/pass.v7000.$random`
					for i in $line; do
					user=`echo $i | awk -F ":" '{print $1}'`
					password=`echo $i | awk -F ":" '{print $2}'`
					done
					return=`$ssh_v7000 $user@$host "chuser -password $password $user 2>&1 /dev/null; echo $?"`
					if [ $return  -eq 0 ]; then
					OS="Network Equipment"
					tableMiddle
					fi
					fi
					#End Check Storwize v7000
					#Check if SAN switch (Brocade)	
					elif  [[ `nmap -p 80 $host | grep open` && `nmap -p 17988 $host | grep closed`  && `nmap -p 111 $host | grep closed` ]];
					then  
					log WARN "Detected San switch"
					host_name=$(TIMEOUT 3 "sshpass -p $PASSWORD $ssh admin@$host switchname")
					if [[ ! "$host_name" == "" ]];
					then
					already_done=`CheckHost $host_name`
					if [[ ! "$already_done" == "1" &&  ! "$host_name" == $myhost_name ]]; then
                                        host_name_ctrl=$host_name_ctrl" "$host_name
					Sn=`sshpass -p $PASSWORD $ssh admin@$host chassisshow | tail -2 | head -1 | awk '{print $3}' `
					comments=$Sn
                                        line=`cat /tmp/pass.$random`
                                        for i in $line; do
                                        user=`echo $i | awk -F ":" '{print $1}'`
                                        password=`echo $i | awk -F ":" '{print $2}'`
                                        if [[ "$user"  =~ "root" ]]; then
                                        password_root=$password
					fi
					done
					for user_on_switch in admin ; do
					return=`sshpass -p $PASSWORD $ssh  $user_on_switch@$host "passwd $user_on_switch -old  $PASSWORD -new $password_root  2>&1 /dev/null; echo $?"`
                                        if [ "$return" = "0" ]; then
					OS="Network Equipment"
					tableMiddle
                                        fi
                                        done
					fi
					fi
					#End Brocade
					#Check if a Linux machine
                           		elif [[ `nmap -p 22 $host | grep open` && `nmap -p 17988 $host | grep closed` && `nmap -p 3306 $host | grep closed` && `TIMEOUT 6 "sshpass -p $PASSWORD $ssh root@$host uname 2>/dev/null"` =~ "Linux" ]];
					then 
					log WARN "Detected Linux host"
					host_name=`sshpass -p $PASSWORD  $ssh root@$host hostname`
					already_done=`CheckHost $host_name`
					if [[ ! "$already_done" == "1" &&  ! "$host_name" == $myhost_name  ]]; then
					host_name_ctrl=$host_name_ctrl" "$host_name
					linPassword
					fi
					#End Check Linux
					#Here you can add an elif if new device is inserted in supported devices
					fi # End of condition on open ports
					fi #End of main condition (host not the server but a client)
                done

tableFooter
log INFO "The HTML table result is: $htmlTable"
sendToTable
rm /tmp/pass.$random
rm /tmp/mess.$random
rm /tmp/pass.win.$random
rm /tmp/pass.v7000.$random
