#!/bin/bash  
#
# Find wwn hostx
# you can execute par rack
#
#



checkRackDhcp () {


clientIP=$(findIPMAC $rackPosition "IP" 2>/dev/null | head -1)
if [[ "$clientIP" != "" ]]; then
        ping -c 1 $clientIP  > /dev/null 2>&1
        PING=$?
        if [[ $PING -ne 0 ]] ; then
                RET=144
                log ERROR "I didn't found any pxe client at/on $rackPosition" 
        else
                log INFO "Good! the client is a valid pxe client ( IP: $clientIP )and it is well connected."
		log INFO "Going to find out WWN of all ports and check that the embedded raid controller is disabled ......"
		log WARN '\n'"$( sshpass -p ***REMOVED***  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $clientIP 'for i in host0 host1 host2 host3;do echo \"port $i\";
 		 cat  /sys/class/fc_host/$i/port_name;echo "1" > /sys/class/fc_host/$i/issue_lip;done;  hpssacli controller all show' 2>/dev/null )"
        fi
else
        RET=144
        log ERROR "I didn't found any pxe client at/on $rackPosition"
fi
exit $RET
}


usage () {
echo "usage $0
-pos [rack_shelf] 
"
}


# Function to find ip address or mac address of given rack shelf
# should be called with a rack shelf and kind of value you want to find as argument

findIPMAC () {
rack=$1
value=$2

switch=$(echo $rack | awk -F "_" '{print $1}')
floor=$(echo $rack | awk -F "_" '{print $2}')

# begin of switch_maps parsing

switch_ip=$(echo "$switch_maps" | grep -w "$switch" | awk  '{print $2}')
# this needed to map switch 2 as it is different from the others
        if [[ "$switch" == "rack2" ]] ; then floor=$(echo $floor | sed 's/...../&2/g;s/2$//') ; fi
switch_port=$(echo "$switch_maps" | grep $floor | awk  '{print $2}')
# end switch map parsing
# find the macs connected:
client_mac=$(perl /usr/sbin/switchlabel.pl $switch_ip public | grep -w "port $switch_port" | awk '{print $2}' )
# transform lowercase for arp output
if [[ -z "$client_mac" ]]; then
log ERROR "I didn't find any client on the rack shelf: $rackPosition!"
exit 1
fi
client_mac=$(echo "${client_mac,,}")
#echo $client_mac
# find the ip for the client
        if [[ ! "$client_mac" == "" ]]; then
                for i in $client_mac; do
                ip_client=$(arp -n | grep  -w "$i" | awk '{print $1}')
                        if  [[ ! "$ip_client" == "" &&  ! "$ip_client_ctrl" =~ $ip_client ]]; then
                        for b in $ip_client; do
                        sshpass -p ***REMOVED***  ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=2 root@$b exit  >> /dev/null 2>&1
                        if [ $? -eq 0 ]; then
                                                        if [[ "$value" == "IP" ]]; then
                                                        echo  -e  $b \\n
                                                        else
                                                                if [[ "$value" == "MAC" ]]; then
                                                                echo -e $i \\n
                                                                else
                                                                log ERROR "MANDATORY param $value is missing or not valid"
                                                                fi
                                                        fi
                        fi
                        done
                        ip_client_ctrl=$ip_client_ctrl" "$ip_client
                        fi

               done
        else
        return 1
        fi
}


#Function log for better printing

log() {
local level=${1?}
shift
local code=""
local line="[$(date '+%F %T')] $level: $*"
if [ -t 2 ]
then
case "$level" in
INFO) code=36 ;;
DEBUG) code=30 ;;
WARN) code=33 ;;
ERROR) code=31 ;;
*) code=37 ;;
esac
echo -e "\e[${code}m${line}\e[0m"
else
echo "$line"
fi >&2

}


check_args() {
#put here the mandatory params
([[  -z "$rackPosition" ]] ) && rackPosition="usage"  && log ERROR "Some mandatory parameters missing!!!!!" && usage && exit 1
}
# Gets the cyclades and swithes values from DB
getEnv() {

Rack=$(echo $rackPosition | awk -F "_" '{print $1}')
Shelf=$(echo $rackPosition | awk -F "_" '{print $2}')
Rack=$(echo $Rack | sed 's/[^0-9]//g')
#Rack=$(echo  "${Rack##${Rack%%?}}")
Shelf=$(echo  "${Shelf##${Shelf%%?}}")


log INFO "About to download env values from http://spmgt.my.comp.ltd/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$Rack&Shelf_Equals=$Shelf"
URI="http://spmgt.my.comp.ltd/SPOT/provisioning/api/sysprodracksmappings?Rack_Equals=$Rack&Shelf_Equals=$Shelf"
results=$(
perl - "$URI"  <<'_HERE_'
use Time::Piece;
use integer;
use POSIX qw(strftime);
use Backticks;
use Data::Dumper;
use Sys::Hostname;
use Socket;
use LWP::UserAgent;
use LWP::Simple;
use strict;
use warnings;
use integer;
use Switch;
use JSON ;
use feature qw(switch);
use HTTP::Cookies;
use HTTP::Request;
use LWP;
use File::Path qw{mkpath};

my $WEB = shift;
my $lwp = LWP::UserAgent->new(
                        timeout               => 10,
);
my $req = HTTP::Request->new( 'GET', "$WEB" );
my $resp = $lwp->request($req);
my $decoded = decode_json($resp->content);
#my %recursive = ( $decoded->{rows} );
#print $req->as_string;
#print Dumper $resp;
#print Dumper $decoded->{rows}->[0]->{switchip};
my $switchip = $decoded->{rows}->[0]->{switchip};
my $bootpip = $decoded->{rows}->[0]->{bootpip};
my $cycladesip = $decoded->{rows}->[0]->{cycladesip};
my $cycladesport = $decoded->{rows}->[0]->{cycladesport};
my $switchport = $decoded->{rows}->[0]->{switchport};
my $rack = $decoded->{rows}->[0]->{rack};
my $shelf = $decoded->{rows}->[0]->{shelf};
print "$switchip\n$bootpip\n$cycladesip\n$cycladesport\n$switchport\n$rack\n$shelf\n";
_HERE_
)
#> /dev/null 2>&1
counter=1
for i in $results
do
case $counter in
1) switchip=$i;;
2) bootpip=$i;;
3) cycladesip=$i;;
4) cycladesport=$i;;
5) switchport=$i;;
6) rack=$i;;
7) shelf=$i;;
esac
counter=$((counter + 1))
done
#Prepare the string for parsing
CYCLADES="rack"$rack"_shelf$shelf $cycladesip:$cycladesport"
case $rack in
2) switch_maps="rack$rack $switchip
shelf$rack$shelf $switchport"
;;
*) switch_maps="rack$rack $switchip
shelf$shelf $switchport"
;;
esac

log INFO "The env values for cyclades are $CYCLADES and for switches $switch_maps"
}

#Actually Get the arguments

while :
do
    case "$1" in
          -pos )
          rackPosition="$2" # You may want to check validity of $2
          shift 2
          ;;
*)      break
;;
           esac
done

#Set the environmental values needed
getEnv 
check_args


checkRackDhcp


